// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/transform/proto/transform.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/transform/proto/transform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace transform {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Vector2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quaterniond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quaterniond_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quaternionf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quaternionf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rigid2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rigid2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rigid2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rigid2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rigid3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rigid3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rigid3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rigid3f_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto() {
  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/transform/proto/transform.proto");
  GOOGLE_CHECK(file != NULL);
  Vector2d_descriptor_ = file->message_type(0);
  static const int Vector2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, y_),
  };
  Vector2d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector2d_descriptor_,
      Vector2d::default_instance_,
      Vector2d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector2d));
  Vector2f_descriptor_ = file->message_type(1);
  static const int Vector2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, y_),
  };
  Vector2f_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector2f_descriptor_,
      Vector2f::default_instance_,
      Vector2f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector2f));
  Vector3d_descriptor_ = file->message_type(2);
  static const int Vector3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, z_),
  };
  Vector3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3d_descriptor_,
      Vector3d::default_instance_,
      Vector3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3d));
  Vector3f_descriptor_ = file->message_type(3);
  static const int Vector3f_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, z_),
  };
  Vector3f_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3f_descriptor_,
      Vector3f::default_instance_,
      Vector3f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3f));
  Quaterniond_descriptor_ = file->message_type(4);
  static const int Quaterniond_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaterniond, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaterniond, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaterniond, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaterniond, w_),
  };
  Quaterniond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quaterniond_descriptor_,
      Quaterniond::default_instance_,
      Quaterniond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaterniond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaterniond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quaterniond));
  Quaternionf_descriptor_ = file->message_type(5);
  static const int Quaternionf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, w_),
  };
  Quaternionf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quaternionf_descriptor_,
      Quaternionf::default_instance_,
      Quaternionf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quaternionf));
  Rigid2d_descriptor_ = file->message_type(6);
  static const int Rigid2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid2d, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid2d, rotation_),
  };
  Rigid2d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rigid2d_descriptor_,
      Rigid2d::default_instance_,
      Rigid2d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid2d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid2d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rigid2d));
  Rigid2f_descriptor_ = file->message_type(7);
  static const int Rigid2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid2f, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid2f, rotation_),
  };
  Rigid2f_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rigid2f_descriptor_,
      Rigid2f::default_instance_,
      Rigid2f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid2f, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid2f, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rigid2f));
  Rigid3d_descriptor_ = file->message_type(8);
  static const int Rigid3d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid3d, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid3d, rotation_),
  };
  Rigid3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rigid3d_descriptor_,
      Rigid3d::default_instance_,
      Rigid3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rigid3d));
  Rigid3f_descriptor_ = file->message_type(9);
  static const int Rigid3f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid3f, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid3f, rotation_),
  };
  Rigid3f_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rigid3f_descriptor_,
      Rigid3f::default_instance_,
      Rigid3f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid3f, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rigid3f, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rigid3f));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector2d_descriptor_, &Vector2d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector2f_descriptor_, &Vector2f::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3d_descriptor_, &Vector3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3f_descriptor_, &Vector3f::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quaterniond_descriptor_, &Quaterniond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quaternionf_descriptor_, &Quaternionf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rigid2d_descriptor_, &Rigid2d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rigid2f_descriptor_, &Rigid2f::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rigid3d_descriptor_, &Rigid3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rigid3f_descriptor_, &Rigid3f::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto() {
  delete Vector2d::default_instance_;
  delete Vector2d_reflection_;
  delete Vector2f::default_instance_;
  delete Vector2f_reflection_;
  delete Vector3d::default_instance_;
  delete Vector3d_reflection_;
  delete Vector3f::default_instance_;
  delete Vector3f_reflection_;
  delete Quaterniond::default_instance_;
  delete Quaterniond_reflection_;
  delete Quaternionf::default_instance_;
  delete Quaternionf_reflection_;
  delete Rigid2d::default_instance_;
  delete Rigid2d_reflection_;
  delete Rigid2f::default_instance_;
  delete Rigid2f_reflection_;
  delete Rigid3d::default_instance_;
  delete Rigid3d_reflection_;
  delete Rigid3f::default_instance_;
  delete Rigid3f_reflection_;
}

void protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n,cartographer/transform/proto/transform"
    ".proto\022\034cartographer.transform.proto\" \n\010"
    "Vector2d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\" \n\010Vector"
    "2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"+\n\010Vector3d\022\t\n\001"
    "x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"+\n\010Vector3"
    "f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"9\n\013Qu"
    "aterniond\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001"
    "(\001\022\t\n\001w\030\004 \001(\001\"9\n\013Quaternionf\022\t\n\001x\030\001 \001(\002\022"
    "\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\"X\n\007Rigi"
    "d2d\022;\n\013translation\030\001 \001(\0132&.cartographer."
    "transform.proto.Vector2d\022\020\n\010rotation\030\002 \001"
    "(\001\"X\n\007Rigid2f\022;\n\013translation\030\001 \001(\0132&.car"
    "tographer.transform.proto.Vector2f\022\020\n\010ro"
    "tation\030\002 \001(\002\"\203\001\n\007Rigid3d\022;\n\013translation\030"
    "\001 \001(\0132&.cartographer.transform.proto.Vec"
    "tor3d\022;\n\010rotation\030\002 \001(\0132).cartographer.t"
    "ransform.proto.Quaterniond\"\203\001\n\007Rigid3f\022;"
    "\n\013translation\030\001 \001(\0132&.cartographer.trans"
    "form.proto.Vector3f\022;\n\010rotation\030\002 \001(\0132)."
    "cartographer.transform.proto.Quaternionf", 800);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/transform/proto/transform.proto", &protobuf_RegisterTypes);
  Vector2d::default_instance_ = new Vector2d();
  Vector2f::default_instance_ = new Vector2f();
  Vector3d::default_instance_ = new Vector3d();
  Vector3f::default_instance_ = new Vector3f();
  Quaterniond::default_instance_ = new Quaterniond();
  Quaternionf::default_instance_ = new Quaternionf();
  Rigid2d::default_instance_ = new Rigid2d();
  Rigid2f::default_instance_ = new Rigid2f();
  Rigid3d::default_instance_ = new Rigid3d();
  Rigid3f::default_instance_ = new Rigid3f();
  Vector2d::default_instance_->InitAsDefaultInstance();
  Vector2f::default_instance_->InitAsDefaultInstance();
  Vector3d::default_instance_->InitAsDefaultInstance();
  Vector3f::default_instance_->InitAsDefaultInstance();
  Quaterniond::default_instance_->InitAsDefaultInstance();
  Quaternionf::default_instance_->InitAsDefaultInstance();
  Rigid2d::default_instance_->InitAsDefaultInstance();
  Rigid2f::default_instance_->InitAsDefaultInstance();
  Rigid3d::default_instance_->InitAsDefaultInstance();
  Rigid3f::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2ftransform_2fproto_2ftransform_2eproto {
  StaticDescriptorInitializer_cartographer_2ftransform_2fproto_2ftransform_2eproto() {
    protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  }
} static_descriptor_initializer_cartographer_2ftransform_2fproto_2ftransform_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vector2d::kXFieldNumber;
const int Vector2d::kYFieldNumber;
#endif  // !_MSC_VER

Vector2d::Vector2d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector2d::InitAsDefaultInstance() {
}

Vector2d::Vector2d(const Vector2d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector2d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2d::~Vector2d() {
  SharedDtor();
}

void Vector2d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2d_descriptor_;
}

const Vector2d& Vector2d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

Vector2d* Vector2d::default_instance_ = NULL;

Vector2d* Vector2d::New() const {
  return new Vector2d;
}

void Vector2d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector2d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector2d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector2d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector2d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector2d::MergeFrom(const Vector2d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector2d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2d::CopyFrom(const Vector2d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2d::IsInitialized() const {

  return true;
}

void Vector2d::Swap(Vector2d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2d_descriptor_;
  metadata.reflection = Vector2d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector2f::kXFieldNumber;
const int Vector2f::kYFieldNumber;
#endif  // !_MSC_VER

Vector2f::Vector2f()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector2f::InitAsDefaultInstance() {
}

Vector2f::Vector2f(const Vector2f& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector2f::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2f::~Vector2f() {
  SharedDtor();
}

void Vector2f::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2f_descriptor_;
}

const Vector2f& Vector2f::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

Vector2f* Vector2f::default_instance_ = NULL;

Vector2f* Vector2f::New() const {
  return new Vector2f;
}

void Vector2f::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector2f::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector2f::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2f::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector2f* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector2f*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector2f::MergeFrom(const Vector2f& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector2f::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2f::CopyFrom(const Vector2f& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {

  return true;
}

void Vector2f::Swap(Vector2f* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2f_descriptor_;
  metadata.reflection = Vector2f_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3d::kXFieldNumber;
const int Vector3d::kYFieldNumber;
const int Vector3d::kZFieldNumber;
#endif  // !_MSC_VER

Vector3d::Vector3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3d::InitAsDefaultInstance() {
}

Vector3d::Vector3d(const Vector3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3d::~Vector3d() {
  SharedDtor();
}

void Vector3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3d_descriptor_;
}

const Vector3d& Vector3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

Vector3d* Vector3d::default_instance_ = NULL;

Vector3d* Vector3d::New() const {
  return new Vector3d;
}

void Vector3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {

  return true;
}

void Vector3d::Swap(Vector3d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3d_descriptor_;
  metadata.reflection = Vector3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3f::kXFieldNumber;
const int Vector3f::kYFieldNumber;
const int Vector3f::kZFieldNumber;
#endif  // !_MSC_VER

Vector3f::Vector3f()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3f::InitAsDefaultInstance() {
}

Vector3f::Vector3f(const Vector3f& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3f::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3f::~Vector3f() {
  SharedDtor();
}

void Vector3f::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3f_descriptor_;
}

const Vector3f& Vector3f::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

Vector3f* Vector3f::default_instance_ = NULL;

Vector3f* Vector3f::New() const {
  return new Vector3f;
}

void Vector3f::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3f::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3f::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3f::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3f* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3f*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3f::MergeFrom(const Vector3f& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3f::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3f::CopyFrom(const Vector3f& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3f::IsInitialized() const {

  return true;
}

void Vector3f::Swap(Vector3f* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3f_descriptor_;
  metadata.reflection = Vector3f_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quaterniond::kXFieldNumber;
const int Quaterniond::kYFieldNumber;
const int Quaterniond::kZFieldNumber;
const int Quaterniond::kWFieldNumber;
#endif  // !_MSC_VER

Quaterniond::Quaterniond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quaterniond::InitAsDefaultInstance() {
}

Quaterniond::Quaterniond(const Quaterniond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quaterniond::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quaterniond::~Quaterniond() {
  SharedDtor();
}

void Quaterniond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quaterniond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaterniond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quaterniond_descriptor_;
}

const Quaterniond& Quaterniond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

Quaterniond* Quaterniond::default_instance_ = NULL;

Quaterniond* Quaterniond::New() const {
  return new Quaterniond;
}

void Quaterniond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    w_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quaterniond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_w;
        break;
      }

      // optional double w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quaterniond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quaterniond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quaterniond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double w = 4;
    if (has_w()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaterniond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quaterniond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quaterniond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quaterniond::MergeFrom(const Quaterniond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quaterniond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaterniond::CopyFrom(const Quaterniond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaterniond::IsInitialized() const {

  return true;
}

void Quaterniond::Swap(Quaterniond* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quaterniond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quaterniond_descriptor_;
  metadata.reflection = Quaterniond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quaternionf::kXFieldNumber;
const int Quaternionf::kYFieldNumber;
const int Quaternionf::kZFieldNumber;
const int Quaternionf::kWFieldNumber;
#endif  // !_MSC_VER

Quaternionf::Quaternionf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quaternionf::InitAsDefaultInstance() {
}

Quaternionf::Quaternionf(const Quaternionf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quaternionf::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quaternionf::~Quaternionf() {
  SharedDtor();
}

void Quaternionf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quaternionf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternionf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quaternionf_descriptor_;
}

const Quaternionf& Quaternionf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

Quaternionf* Quaternionf::default_instance_ = NULL;

Quaternionf* Quaternionf::New() const {
  return new Quaternionf;
}

void Quaternionf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    w_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quaternionf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // optional float w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quaternionf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quaternionf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quaternionf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float w = 4;
    if (has_w()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternionf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quaternionf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quaternionf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quaternionf::MergeFrom(const Quaternionf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quaternionf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternionf::CopyFrom(const Quaternionf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternionf::IsInitialized() const {

  return true;
}

void Quaternionf::Swap(Quaternionf* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quaternionf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quaternionf_descriptor_;
  metadata.reflection = Quaternionf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rigid2d::kTranslationFieldNumber;
const int Rigid2d::kRotationFieldNumber;
#endif  // !_MSC_VER

Rigid2d::Rigid2d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rigid2d::InitAsDefaultInstance() {
  translation_ = const_cast< ::cartographer::transform::proto::Vector2d*>(&::cartographer::transform::proto::Vector2d::default_instance());
}

Rigid2d::Rigid2d(const Rigid2d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rigid2d::SharedCtor() {
  _cached_size_ = 0;
  translation_ = NULL;
  rotation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rigid2d::~Rigid2d() {
  SharedDtor();
}

void Rigid2d::SharedDtor() {
  if (this != default_instance_) {
    delete translation_;
  }
}

void Rigid2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rigid2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rigid2d_descriptor_;
}

const Rigid2d& Rigid2d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

Rigid2d* Rigid2d::default_instance_ = NULL;

Rigid2d* Rigid2d::New() const {
  return new Rigid2d;
}

void Rigid2d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_translation()) {
      if (translation_ != NULL) translation_->::cartographer::transform::proto::Vector2d::Clear();
    }
    rotation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rigid2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Vector2d translation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_rotation;
        break;
      }

      // optional double rotation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rigid2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cartographer.transform.proto.Vector2d translation = 1;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->translation(), output);
  }

  // optional double rotation = 2;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rigid2d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cartographer.transform.proto.Vector2d translation = 1;
  if (has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->translation(), target);
  }

  // optional double rotation = 2;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rotation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rigid2d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cartographer.transform.proto.Vector2d translation = 1;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translation());
    }

    // optional double rotation = 2;
    if (has_rotation()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rigid2d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rigid2d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rigid2d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rigid2d::MergeFrom(const Rigid2d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_translation()) {
      mutable_translation()->::cartographer::transform::proto::Vector2d::MergeFrom(from.translation());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rigid2d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rigid2d::CopyFrom(const Rigid2d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid2d::IsInitialized() const {

  return true;
}

void Rigid2d::Swap(Rigid2d* other) {
  if (other != this) {
    std::swap(translation_, other->translation_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rigid2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rigid2d_descriptor_;
  metadata.reflection = Rigid2d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rigid2f::kTranslationFieldNumber;
const int Rigid2f::kRotationFieldNumber;
#endif  // !_MSC_VER

Rigid2f::Rigid2f()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rigid2f::InitAsDefaultInstance() {
  translation_ = const_cast< ::cartographer::transform::proto::Vector2f*>(&::cartographer::transform::proto::Vector2f::default_instance());
}

Rigid2f::Rigid2f(const Rigid2f& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rigid2f::SharedCtor() {
  _cached_size_ = 0;
  translation_ = NULL;
  rotation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rigid2f::~Rigid2f() {
  SharedDtor();
}

void Rigid2f::SharedDtor() {
  if (this != default_instance_) {
    delete translation_;
  }
}

void Rigid2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rigid2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rigid2f_descriptor_;
}

const Rigid2f& Rigid2f::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

Rigid2f* Rigid2f::default_instance_ = NULL;

Rigid2f* Rigid2f::New() const {
  return new Rigid2f;
}

void Rigid2f::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_translation()) {
      if (translation_ != NULL) translation_->::cartographer::transform::proto::Vector2f::Clear();
    }
    rotation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rigid2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Vector2f translation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_rotation;
        break;
      }

      // optional float rotation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rigid2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cartographer.transform.proto.Vector2f translation = 1;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->translation(), output);
  }

  // optional float rotation = 2;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rigid2f::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cartographer.transform.proto.Vector2f translation = 1;
  if (has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->translation(), target);
  }

  // optional float rotation = 2;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rotation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rigid2f::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cartographer.transform.proto.Vector2f translation = 1;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translation());
    }

    // optional float rotation = 2;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rigid2f::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rigid2f* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rigid2f*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rigid2f::MergeFrom(const Rigid2f& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_translation()) {
      mutable_translation()->::cartographer::transform::proto::Vector2f::MergeFrom(from.translation());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rigid2f::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rigid2f::CopyFrom(const Rigid2f& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid2f::IsInitialized() const {

  return true;
}

void Rigid2f::Swap(Rigid2f* other) {
  if (other != this) {
    std::swap(translation_, other->translation_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rigid2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rigid2f_descriptor_;
  metadata.reflection = Rigid2f_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rigid3d::kTranslationFieldNumber;
const int Rigid3d::kRotationFieldNumber;
#endif  // !_MSC_VER

Rigid3d::Rigid3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rigid3d::InitAsDefaultInstance() {
  translation_ = const_cast< ::cartographer::transform::proto::Vector3d*>(&::cartographer::transform::proto::Vector3d::default_instance());
  rotation_ = const_cast< ::cartographer::transform::proto::Quaterniond*>(&::cartographer::transform::proto::Quaterniond::default_instance());
}

Rigid3d::Rigid3d(const Rigid3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rigid3d::SharedCtor() {
  _cached_size_ = 0;
  translation_ = NULL;
  rotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rigid3d::~Rigid3d() {
  SharedDtor();
}

void Rigid3d::SharedDtor() {
  if (this != default_instance_) {
    delete translation_;
    delete rotation_;
  }
}

void Rigid3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rigid3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rigid3d_descriptor_;
}

const Rigid3d& Rigid3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

Rigid3d* Rigid3d::default_instance_ = NULL;

Rigid3d* Rigid3d::New() const {
  return new Rigid3d;
}

void Rigid3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_translation()) {
      if (translation_ != NULL) translation_->::cartographer::transform::proto::Vector3d::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::cartographer::transform::proto::Quaterniond::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rigid3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Vector3d translation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rotation;
        break;
      }

      // optional .cartographer.transform.proto.Quaterniond rotation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rigid3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cartographer.transform.proto.Vector3d translation = 1;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->translation(), output);
  }

  // optional .cartographer.transform.proto.Quaterniond rotation = 2;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rigid3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cartographer.transform.proto.Vector3d translation = 1;
  if (has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->translation(), target);
  }

  // optional .cartographer.transform.proto.Quaterniond rotation = 2;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rotation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rigid3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cartographer.transform.proto.Vector3d translation = 1;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translation());
    }

    // optional .cartographer.transform.proto.Quaterniond rotation = 2;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rigid3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rigid3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rigid3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rigid3d::MergeFrom(const Rigid3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_translation()) {
      mutable_translation()->::cartographer::transform::proto::Vector3d::MergeFrom(from.translation());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::cartographer::transform::proto::Quaterniond::MergeFrom(from.rotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rigid3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rigid3d::CopyFrom(const Rigid3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid3d::IsInitialized() const {

  return true;
}

void Rigid3d::Swap(Rigid3d* other) {
  if (other != this) {
    std::swap(translation_, other->translation_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rigid3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rigid3d_descriptor_;
  metadata.reflection = Rigid3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rigid3f::kTranslationFieldNumber;
const int Rigid3f::kRotationFieldNumber;
#endif  // !_MSC_VER

Rigid3f::Rigid3f()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rigid3f::InitAsDefaultInstance() {
  translation_ = const_cast< ::cartographer::transform::proto::Vector3f*>(&::cartographer::transform::proto::Vector3f::default_instance());
  rotation_ = const_cast< ::cartographer::transform::proto::Quaternionf*>(&::cartographer::transform::proto::Quaternionf::default_instance());
}

Rigid3f::Rigid3f(const Rigid3f& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rigid3f::SharedCtor() {
  _cached_size_ = 0;
  translation_ = NULL;
  rotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rigid3f::~Rigid3f() {
  SharedDtor();
}

void Rigid3f::SharedDtor() {
  if (this != default_instance_) {
    delete translation_;
    delete rotation_;
  }
}

void Rigid3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rigid3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rigid3f_descriptor_;
}

const Rigid3f& Rigid3f::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

Rigid3f* Rigid3f::default_instance_ = NULL;

Rigid3f* Rigid3f::New() const {
  return new Rigid3f;
}

void Rigid3f::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_translation()) {
      if (translation_ != NULL) translation_->::cartographer::transform::proto::Vector3f::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::cartographer::transform::proto::Quaternionf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rigid3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Vector3f translation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rotation;
        break;
      }

      // optional .cartographer.transform.proto.Quaternionf rotation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rigid3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cartographer.transform.proto.Vector3f translation = 1;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->translation(), output);
  }

  // optional .cartographer.transform.proto.Quaternionf rotation = 2;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rigid3f::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cartographer.transform.proto.Vector3f translation = 1;
  if (has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->translation(), target);
  }

  // optional .cartographer.transform.proto.Quaternionf rotation = 2;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rotation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rigid3f::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cartographer.transform.proto.Vector3f translation = 1;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translation());
    }

    // optional .cartographer.transform.proto.Quaternionf rotation = 2;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rigid3f::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rigid3f* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rigid3f*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rigid3f::MergeFrom(const Rigid3f& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_translation()) {
      mutable_translation()->::cartographer::transform::proto::Vector3f::MergeFrom(from.translation());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::cartographer::transform::proto::Quaternionf::MergeFrom(from.rotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rigid3f::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rigid3f::CopyFrom(const Rigid3f& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid3f::IsInitialized() const {

  return true;
}

void Rigid3f::Swap(Rigid3f* other) {
  if (other != this) {
    std::swap(translation_, other->translation_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rigid3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rigid3f_descriptor_;
  metadata.reflection = Rigid3f_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace transform
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
