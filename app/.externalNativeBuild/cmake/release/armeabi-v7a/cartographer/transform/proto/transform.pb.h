// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/transform/proto/transform.proto

#ifndef PROTOBUF_cartographer_2ftransform_2fproto_2ftransform_2eproto__INCLUDED
#define PROTOBUF_cartographer_2ftransform_2fproto_2ftransform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace transform {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto();

class Vector2d;
class Vector2f;
class Vector3d;
class Vector3f;
class Quaterniond;
class Quaternionf;
class Rigid2d;
class Rigid2f;
class Rigid3d;
class Rigid3f;

// ===================================================================

class Vector2d : public ::google::protobuf::Message {
 public:
  Vector2d();
  virtual ~Vector2d();

  Vector2d(const Vector2d& from);

  inline Vector2d& operator=(const Vector2d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2d& default_instance();

  void Swap(Vector2d* other);

  // implements Message ----------------------------------------------

  Vector2d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2d& from);
  void MergeFrom(const Vector2d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // @@protoc_insertion_point(class_scope:cartographer.transform.proto.Vector2d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double x_;
  double y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static Vector2d* default_instance_;
};
// -------------------------------------------------------------------

class Vector2f : public ::google::protobuf::Message {
 public:
  Vector2f();
  virtual ~Vector2f();

  Vector2f(const Vector2f& from);

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2f& default_instance();

  void Swap(Vector2f* other);

  // implements Message ----------------------------------------------

  Vector2f* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2f& from);
  void MergeFrom(const Vector2f& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:cartographer.transform.proto.Vector2f)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static Vector2f* default_instance_;
};
// -------------------------------------------------------------------

class Vector3d : public ::google::protobuf::Message {
 public:
  Vector3d();
  virtual ~Vector3d();

  Vector3d(const Vector3d& from);

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3d& default_instance();

  void Swap(Vector3d* other);

  // implements Message ----------------------------------------------

  Vector3d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // optional double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:cartographer.transform.proto.Vector3d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double x_;
  double y_;
  double z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static Vector3d* default_instance_;
};
// -------------------------------------------------------------------

class Vector3f : public ::google::protobuf::Message {
 public:
  Vector3f();
  virtual ~Vector3f();

  Vector3f(const Vector3f& from);

  inline Vector3f& operator=(const Vector3f& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3f& default_instance();

  void Swap(Vector3f* other);

  // implements Message ----------------------------------------------

  Vector3f* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3f& from);
  void MergeFrom(const Vector3f& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:cartographer.transform.proto.Vector3f)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static Vector3f* default_instance_;
};
// -------------------------------------------------------------------

class Quaterniond : public ::google::protobuf::Message {
 public:
  Quaterniond();
  virtual ~Quaterniond();

  Quaterniond(const Quaterniond& from);

  inline Quaterniond& operator=(const Quaterniond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaterniond& default_instance();

  void Swap(Quaterniond* other);

  // implements Message ----------------------------------------------

  Quaterniond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quaterniond& from);
  void MergeFrom(const Quaterniond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // optional double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // optional double w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline double w() const;
  inline void set_w(double value);

  // @@protoc_insertion_point(class_scope:cartographer.transform.proto.Quaterniond)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double x_;
  double y_;
  double z_;
  double w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static Quaterniond* default_instance_;
};
// -------------------------------------------------------------------

class Quaternionf : public ::google::protobuf::Message {
 public:
  Quaternionf();
  virtual ~Quaternionf();

  Quaternionf(const Quaternionf& from);

  inline Quaternionf& operator=(const Quaternionf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaternionf& default_instance();

  void Swap(Quaternionf* other);

  // implements Message ----------------------------------------------

  Quaternionf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quaternionf& from);
  void MergeFrom(const Quaternionf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // optional float w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline float w() const;
  inline void set_w(float value);

  // @@protoc_insertion_point(class_scope:cartographer.transform.proto.Quaternionf)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;
  float w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static Quaternionf* default_instance_;
};
// -------------------------------------------------------------------

class Rigid2d : public ::google::protobuf::Message {
 public:
  Rigid2d();
  virtual ~Rigid2d();

  Rigid2d(const Rigid2d& from);

  inline Rigid2d& operator=(const Rigid2d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rigid2d& default_instance();

  void Swap(Rigid2d* other);

  // implements Message ----------------------------------------------

  Rigid2d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rigid2d& from);
  void MergeFrom(const Rigid2d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Vector2d translation = 1;
  inline bool has_translation() const;
  inline void clear_translation();
  static const int kTranslationFieldNumber = 1;
  inline const ::cartographer::transform::proto::Vector2d& translation() const;
  inline ::cartographer::transform::proto::Vector2d* mutable_translation();
  inline ::cartographer::transform::proto::Vector2d* release_translation();
  inline void set_allocated_translation(::cartographer::transform::proto::Vector2d* translation);

  // optional double rotation = 2;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 2;
  inline double rotation() const;
  inline void set_rotation(double value);

  // @@protoc_insertion_point(class_scope:cartographer.transform.proto.Rigid2d)
 private:
  inline void set_has_translation();
  inline void clear_has_translation();
  inline void set_has_rotation();
  inline void clear_has_rotation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::cartographer::transform::proto::Vector2d* translation_;
  double rotation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static Rigid2d* default_instance_;
};
// -------------------------------------------------------------------

class Rigid2f : public ::google::protobuf::Message {
 public:
  Rigid2f();
  virtual ~Rigid2f();

  Rigid2f(const Rigid2f& from);

  inline Rigid2f& operator=(const Rigid2f& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rigid2f& default_instance();

  void Swap(Rigid2f* other);

  // implements Message ----------------------------------------------

  Rigid2f* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rigid2f& from);
  void MergeFrom(const Rigid2f& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Vector2f translation = 1;
  inline bool has_translation() const;
  inline void clear_translation();
  static const int kTranslationFieldNumber = 1;
  inline const ::cartographer::transform::proto::Vector2f& translation() const;
  inline ::cartographer::transform::proto::Vector2f* mutable_translation();
  inline ::cartographer::transform::proto::Vector2f* release_translation();
  inline void set_allocated_translation(::cartographer::transform::proto::Vector2f* translation);

  // optional float rotation = 2;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 2;
  inline float rotation() const;
  inline void set_rotation(float value);

  // @@protoc_insertion_point(class_scope:cartographer.transform.proto.Rigid2f)
 private:
  inline void set_has_translation();
  inline void clear_has_translation();
  inline void set_has_rotation();
  inline void clear_has_rotation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::cartographer::transform::proto::Vector2f* translation_;
  float rotation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static Rigid2f* default_instance_;
};
// -------------------------------------------------------------------

class Rigid3d : public ::google::protobuf::Message {
 public:
  Rigid3d();
  virtual ~Rigid3d();

  Rigid3d(const Rigid3d& from);

  inline Rigid3d& operator=(const Rigid3d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rigid3d& default_instance();

  void Swap(Rigid3d* other);

  // implements Message ----------------------------------------------

  Rigid3d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rigid3d& from);
  void MergeFrom(const Rigid3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Vector3d translation = 1;
  inline bool has_translation() const;
  inline void clear_translation();
  static const int kTranslationFieldNumber = 1;
  inline const ::cartographer::transform::proto::Vector3d& translation() const;
  inline ::cartographer::transform::proto::Vector3d* mutable_translation();
  inline ::cartographer::transform::proto::Vector3d* release_translation();
  inline void set_allocated_translation(::cartographer::transform::proto::Vector3d* translation);

  // optional .cartographer.transform.proto.Quaterniond rotation = 2;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 2;
  inline const ::cartographer::transform::proto::Quaterniond& rotation() const;
  inline ::cartographer::transform::proto::Quaterniond* mutable_rotation();
  inline ::cartographer::transform::proto::Quaterniond* release_rotation();
  inline void set_allocated_rotation(::cartographer::transform::proto::Quaterniond* rotation);

  // @@protoc_insertion_point(class_scope:cartographer.transform.proto.Rigid3d)
 private:
  inline void set_has_translation();
  inline void clear_has_translation();
  inline void set_has_rotation();
  inline void clear_has_rotation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::cartographer::transform::proto::Vector3d* translation_;
  ::cartographer::transform::proto::Quaterniond* rotation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static Rigid3d* default_instance_;
};
// -------------------------------------------------------------------

class Rigid3f : public ::google::protobuf::Message {
 public:
  Rigid3f();
  virtual ~Rigid3f();

  Rigid3f(const Rigid3f& from);

  inline Rigid3f& operator=(const Rigid3f& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rigid3f& default_instance();

  void Swap(Rigid3f* other);

  // implements Message ----------------------------------------------

  Rigid3f* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rigid3f& from);
  void MergeFrom(const Rigid3f& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Vector3f translation = 1;
  inline bool has_translation() const;
  inline void clear_translation();
  static const int kTranslationFieldNumber = 1;
  inline const ::cartographer::transform::proto::Vector3f& translation() const;
  inline ::cartographer::transform::proto::Vector3f* mutable_translation();
  inline ::cartographer::transform::proto::Vector3f* release_translation();
  inline void set_allocated_translation(::cartographer::transform::proto::Vector3f* translation);

  // optional .cartographer.transform.proto.Quaternionf rotation = 2;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 2;
  inline const ::cartographer::transform::proto::Quaternionf& rotation() const;
  inline ::cartographer::transform::proto::Quaternionf* mutable_rotation();
  inline ::cartographer::transform::proto::Quaternionf* release_rotation();
  inline void set_allocated_rotation(::cartographer::transform::proto::Quaternionf* rotation);

  // @@protoc_insertion_point(class_scope:cartographer.transform.proto.Rigid3f)
 private:
  inline void set_has_translation();
  inline void clear_has_translation();
  inline void set_has_rotation();
  inline void clear_has_rotation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::cartographer::transform::proto::Vector3f* translation_;
  ::cartographer::transform::proto::Quaternionf* rotation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static Rigid3f* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector2d

// optional double x = 1;
inline bool Vector2d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector2d::x() const {
  return x_;
}
inline void Vector2d::set_x(double value) {
  set_has_x();
  x_ = value;
}

// optional double y = 2;
inline bool Vector2d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector2d::y() const {
  return y_;
}
inline void Vector2d::set_y(double value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Vector2f

// optional float x = 1;
inline bool Vector2f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2f::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector2f::x() const {
  return x_;
}
inline void Vector2f::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Vector2f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2f::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector2f::y() const {
  return y_;
}
inline void Vector2f::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Vector3d

// optional double x = 1;
inline bool Vector3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector3d::x() const {
  return x_;
}
inline void Vector3d::set_x(double value) {
  set_has_x();
  x_ = value;
}

// optional double y = 2;
inline bool Vector3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector3d::y() const {
  return y_;
}
inline void Vector3d::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional double z = 3;
inline bool Vector3d::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3d::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3d::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3d::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector3d::z() const {
  return z_;
}
inline void Vector3d::set_z(double value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// Vector3f

// optional float x = 1;
inline bool Vector3f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3f::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3f::x() const {
  return x_;
}
inline void Vector3f::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Vector3f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3f::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3f::y() const {
  return y_;
}
inline void Vector3f::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool Vector3f::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3f::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3f::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3f::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3f::z() const {
  return z_;
}
inline void Vector3f::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// Quaterniond

// optional double x = 1;
inline bool Quaterniond::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Quaterniond::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Quaterniond::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Quaterniond::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Quaterniond::x() const {
  return x_;
}
inline void Quaterniond::set_x(double value) {
  set_has_x();
  x_ = value;
}

// optional double y = 2;
inline bool Quaterniond::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Quaterniond::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Quaterniond::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Quaterniond::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Quaterniond::y() const {
  return y_;
}
inline void Quaterniond::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional double z = 3;
inline bool Quaterniond::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Quaterniond::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Quaterniond::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Quaterniond::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Quaterniond::z() const {
  return z_;
}
inline void Quaterniond::set_z(double value) {
  set_has_z();
  z_ = value;
}

// optional double w = 4;
inline bool Quaterniond::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Quaterniond::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Quaterniond::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Quaterniond::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline double Quaterniond::w() const {
  return w_;
}
inline void Quaterniond::set_w(double value) {
  set_has_w();
  w_ = value;
}

// -------------------------------------------------------------------

// Quaternionf

// optional float x = 1;
inline bool Quaternionf::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Quaternionf::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Quaternionf::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Quaternionf::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Quaternionf::x() const {
  return x_;
}
inline void Quaternionf::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Quaternionf::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Quaternionf::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Quaternionf::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Quaternionf::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Quaternionf::y() const {
  return y_;
}
inline void Quaternionf::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool Quaternionf::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Quaternionf::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Quaternionf::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Quaternionf::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Quaternionf::z() const {
  return z_;
}
inline void Quaternionf::set_z(float value) {
  set_has_z();
  z_ = value;
}

// optional float w = 4;
inline bool Quaternionf::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Quaternionf::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Quaternionf::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Quaternionf::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float Quaternionf::w() const {
  return w_;
}
inline void Quaternionf::set_w(float value) {
  set_has_w();
  w_ = value;
}

// -------------------------------------------------------------------

// Rigid2d

// optional .cartographer.transform.proto.Vector2d translation = 1;
inline bool Rigid2d::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rigid2d::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rigid2d::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rigid2d::clear_translation() {
  if (translation_ != NULL) translation_->::cartographer::transform::proto::Vector2d::Clear();
  clear_has_translation();
}
inline const ::cartographer::transform::proto::Vector2d& Rigid2d::translation() const {
  return translation_ != NULL ? *translation_ : *default_instance_->translation_;
}
inline ::cartographer::transform::proto::Vector2d* Rigid2d::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) translation_ = new ::cartographer::transform::proto::Vector2d;
  return translation_;
}
inline ::cartographer::transform::proto::Vector2d* Rigid2d::release_translation() {
  clear_has_translation();
  ::cartographer::transform::proto::Vector2d* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Rigid2d::set_allocated_translation(::cartographer::transform::proto::Vector2d* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
}

// optional double rotation = 2;
inline bool Rigid2d::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rigid2d::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rigid2d::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rigid2d::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
inline double Rigid2d::rotation() const {
  return rotation_;
}
inline void Rigid2d::set_rotation(double value) {
  set_has_rotation();
  rotation_ = value;
}

// -------------------------------------------------------------------

// Rigid2f

// optional .cartographer.transform.proto.Vector2f translation = 1;
inline bool Rigid2f::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rigid2f::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rigid2f::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rigid2f::clear_translation() {
  if (translation_ != NULL) translation_->::cartographer::transform::proto::Vector2f::Clear();
  clear_has_translation();
}
inline const ::cartographer::transform::proto::Vector2f& Rigid2f::translation() const {
  return translation_ != NULL ? *translation_ : *default_instance_->translation_;
}
inline ::cartographer::transform::proto::Vector2f* Rigid2f::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) translation_ = new ::cartographer::transform::proto::Vector2f;
  return translation_;
}
inline ::cartographer::transform::proto::Vector2f* Rigid2f::release_translation() {
  clear_has_translation();
  ::cartographer::transform::proto::Vector2f* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Rigid2f::set_allocated_translation(::cartographer::transform::proto::Vector2f* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
}

// optional float rotation = 2;
inline bool Rigid2f::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rigid2f::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rigid2f::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rigid2f::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
inline float Rigid2f::rotation() const {
  return rotation_;
}
inline void Rigid2f::set_rotation(float value) {
  set_has_rotation();
  rotation_ = value;
}

// -------------------------------------------------------------------

// Rigid3d

// optional .cartographer.transform.proto.Vector3d translation = 1;
inline bool Rigid3d::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rigid3d::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rigid3d::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rigid3d::clear_translation() {
  if (translation_ != NULL) translation_->::cartographer::transform::proto::Vector3d::Clear();
  clear_has_translation();
}
inline const ::cartographer::transform::proto::Vector3d& Rigid3d::translation() const {
  return translation_ != NULL ? *translation_ : *default_instance_->translation_;
}
inline ::cartographer::transform::proto::Vector3d* Rigid3d::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) translation_ = new ::cartographer::transform::proto::Vector3d;
  return translation_;
}
inline ::cartographer::transform::proto::Vector3d* Rigid3d::release_translation() {
  clear_has_translation();
  ::cartographer::transform::proto::Vector3d* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Rigid3d::set_allocated_translation(::cartographer::transform::proto::Vector3d* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
}

// optional .cartographer.transform.proto.Quaterniond rotation = 2;
inline bool Rigid3d::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rigid3d::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rigid3d::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rigid3d::clear_rotation() {
  if (rotation_ != NULL) rotation_->::cartographer::transform::proto::Quaterniond::Clear();
  clear_has_rotation();
}
inline const ::cartographer::transform::proto::Quaterniond& Rigid3d::rotation() const {
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::cartographer::transform::proto::Quaterniond* Rigid3d::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::cartographer::transform::proto::Quaterniond;
  return rotation_;
}
inline ::cartographer::transform::proto::Quaterniond* Rigid3d::release_rotation() {
  clear_has_rotation();
  ::cartographer::transform::proto::Quaterniond* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void Rigid3d::set_allocated_rotation(::cartographer::transform::proto::Quaterniond* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
}

// -------------------------------------------------------------------

// Rigid3f

// optional .cartographer.transform.proto.Vector3f translation = 1;
inline bool Rigid3f::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rigid3f::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rigid3f::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rigid3f::clear_translation() {
  if (translation_ != NULL) translation_->::cartographer::transform::proto::Vector3f::Clear();
  clear_has_translation();
}
inline const ::cartographer::transform::proto::Vector3f& Rigid3f::translation() const {
  return translation_ != NULL ? *translation_ : *default_instance_->translation_;
}
inline ::cartographer::transform::proto::Vector3f* Rigid3f::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) translation_ = new ::cartographer::transform::proto::Vector3f;
  return translation_;
}
inline ::cartographer::transform::proto::Vector3f* Rigid3f::release_translation() {
  clear_has_translation();
  ::cartographer::transform::proto::Vector3f* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Rigid3f::set_allocated_translation(::cartographer::transform::proto::Vector3f* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
}

// optional .cartographer.transform.proto.Quaternionf rotation = 2;
inline bool Rigid3f::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rigid3f::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rigid3f::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rigid3f::clear_rotation() {
  if (rotation_ != NULL) rotation_->::cartographer::transform::proto::Quaternionf::Clear();
  clear_has_rotation();
}
inline const ::cartographer::transform::proto::Quaternionf& Rigid3f::rotation() const {
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::cartographer::transform::proto::Quaternionf* Rigid3f::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::cartographer::transform::proto::Quaternionf;
  return rotation_;
}
inline ::cartographer::transform::proto::Quaternionf* Rigid3f::release_rotation() {
  clear_has_rotation();
  ::cartographer::transform::proto::Quaternionf* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void Rigid3f::set_allocated_rotation(::cartographer::transform::proto::Quaternionf* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace transform
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2ftransform_2fproto_2ftransform_2eproto__INCLUDED
