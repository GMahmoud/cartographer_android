// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fsubmap_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fsubmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping_2d/proto/probability_grid.pb.h"
#include "cartographer/mapping_3d/proto/hybrid_grid.pb.h"
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_2eproto();

class Submap2D;
class Submap3D;

// ===================================================================

class Submap2D : public ::google::protobuf::Message {
 public:
  Submap2D();
  virtual ~Submap2D();

  Submap2D(const Submap2D& from);

  inline Submap2D& operator=(const Submap2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Submap2D& default_instance();

  void Swap(Submap2D* other);

  // implements Message ----------------------------------------------

  Submap2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Submap2D& from);
  void MergeFrom(const Submap2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
  inline bool has_local_pose() const;
  inline void clear_local_pose();
  static const int kLocalPoseFieldNumber = 1;
  inline const ::cartographer::transform::proto::Rigid3d& local_pose() const;
  inline ::cartographer::transform::proto::Rigid3d* mutable_local_pose();
  inline ::cartographer::transform::proto::Rigid3d* release_local_pose();
  inline void set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose);

  // optional int32 num_range_data = 2;
  inline bool has_num_range_data() const;
  inline void clear_num_range_data();
  static const int kNumRangeDataFieldNumber = 2;
  inline ::google::protobuf::int32 num_range_data() const;
  inline void set_num_range_data(::google::protobuf::int32 value);

  // optional bool finished = 3;
  inline bool has_finished() const;
  inline void clear_finished();
  static const int kFinishedFieldNumber = 3;
  inline bool finished() const;
  inline void set_finished(bool value);

  // optional .cartographer.mapping_2d.proto.ProbabilityGrid probability_grid = 4;
  inline bool has_probability_grid() const;
  inline void clear_probability_grid();
  static const int kProbabilityGridFieldNumber = 4;
  inline const ::cartographer::mapping_2d::proto::ProbabilityGrid& probability_grid() const;
  inline ::cartographer::mapping_2d::proto::ProbabilityGrid* mutable_probability_grid();
  inline ::cartographer::mapping_2d::proto::ProbabilityGrid* release_probability_grid();
  inline void set_allocated_probability_grid(::cartographer::mapping_2d::proto::ProbabilityGrid* probability_grid);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Submap2D)
 private:
  inline void set_has_local_pose();
  inline void clear_has_local_pose();
  inline void set_has_num_range_data();
  inline void clear_has_num_range_data();
  inline void set_has_finished();
  inline void clear_has_finished();
  inline void set_has_probability_grid();
  inline void clear_has_probability_grid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::cartographer::transform::proto::Rigid3d* local_pose_;
  ::google::protobuf::int32 num_range_data_;
  bool finished_;
  ::cartographer::mapping_2d::proto::ProbabilityGrid* probability_grid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_2eproto();

  void InitAsDefaultInstance();
  static Submap2D* default_instance_;
};
// -------------------------------------------------------------------

class Submap3D : public ::google::protobuf::Message {
 public:
  Submap3D();
  virtual ~Submap3D();

  Submap3D(const Submap3D& from);

  inline Submap3D& operator=(const Submap3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Submap3D& default_instance();

  void Swap(Submap3D* other);

  // implements Message ----------------------------------------------

  Submap3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Submap3D& from);
  void MergeFrom(const Submap3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
  inline bool has_local_pose() const;
  inline void clear_local_pose();
  static const int kLocalPoseFieldNumber = 1;
  inline const ::cartographer::transform::proto::Rigid3d& local_pose() const;
  inline ::cartographer::transform::proto::Rigid3d* mutable_local_pose();
  inline ::cartographer::transform::proto::Rigid3d* release_local_pose();
  inline void set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose);

  // optional int32 num_range_data = 2;
  inline bool has_num_range_data() const;
  inline void clear_num_range_data();
  static const int kNumRangeDataFieldNumber = 2;
  inline ::google::protobuf::int32 num_range_data() const;
  inline void set_num_range_data(::google::protobuf::int32 value);

  // optional bool finished = 3;
  inline bool has_finished() const;
  inline void clear_finished();
  static const int kFinishedFieldNumber = 3;
  inline bool finished() const;
  inline void set_finished(bool value);

  // optional .cartographer.mapping_3d.proto.HybridGrid high_resolution_hybrid_grid = 4;
  inline bool has_high_resolution_hybrid_grid() const;
  inline void clear_high_resolution_hybrid_grid();
  static const int kHighResolutionHybridGridFieldNumber = 4;
  inline const ::cartographer::mapping_3d::proto::HybridGrid& high_resolution_hybrid_grid() const;
  inline ::cartographer::mapping_3d::proto::HybridGrid* mutable_high_resolution_hybrid_grid();
  inline ::cartographer::mapping_3d::proto::HybridGrid* release_high_resolution_hybrid_grid();
  inline void set_allocated_high_resolution_hybrid_grid(::cartographer::mapping_3d::proto::HybridGrid* high_resolution_hybrid_grid);

  // optional .cartographer.mapping_3d.proto.HybridGrid low_resolution_hybrid_grid = 5;
  inline bool has_low_resolution_hybrid_grid() const;
  inline void clear_low_resolution_hybrid_grid();
  static const int kLowResolutionHybridGridFieldNumber = 5;
  inline const ::cartographer::mapping_3d::proto::HybridGrid& low_resolution_hybrid_grid() const;
  inline ::cartographer::mapping_3d::proto::HybridGrid* mutable_low_resolution_hybrid_grid();
  inline ::cartographer::mapping_3d::proto::HybridGrid* release_low_resolution_hybrid_grid();
  inline void set_allocated_low_resolution_hybrid_grid(::cartographer::mapping_3d::proto::HybridGrid* low_resolution_hybrid_grid);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Submap3D)
 private:
  inline void set_has_local_pose();
  inline void clear_has_local_pose();
  inline void set_has_num_range_data();
  inline void clear_has_num_range_data();
  inline void set_has_finished();
  inline void clear_has_finished();
  inline void set_has_high_resolution_hybrid_grid();
  inline void clear_has_high_resolution_hybrid_grid();
  inline void set_has_low_resolution_hybrid_grid();
  inline void clear_has_low_resolution_hybrid_grid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::cartographer::transform::proto::Rigid3d* local_pose_;
  ::google::protobuf::int32 num_range_data_;
  bool finished_;
  ::cartographer::mapping_3d::proto::HybridGrid* high_resolution_hybrid_grid_;
  ::cartographer::mapping_3d::proto::HybridGrid* low_resolution_hybrid_grid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_2eproto();

  void InitAsDefaultInstance();
  static Submap3D* default_instance_;
};
// ===================================================================


// ===================================================================

// Submap2D

// optional .cartographer.transform.proto.Rigid3d local_pose = 1;
inline bool Submap2D::has_local_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Submap2D::set_has_local_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Submap2D::clear_has_local_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Submap2D::clear_local_pose() {
  if (local_pose_ != NULL) local_pose_->::cartographer::transform::proto::Rigid3d::Clear();
  clear_has_local_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& Submap2D::local_pose() const {
  return local_pose_ != NULL ? *local_pose_ : *default_instance_->local_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Submap2D::mutable_local_pose() {
  set_has_local_pose();
  if (local_pose_ == NULL) local_pose_ = new ::cartographer::transform::proto::Rigid3d;
  return local_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Submap2D::release_local_pose() {
  clear_has_local_pose();
  ::cartographer::transform::proto::Rigid3d* temp = local_pose_;
  local_pose_ = NULL;
  return temp;
}
inline void Submap2D::set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose) {
  delete local_pose_;
  local_pose_ = local_pose;
  if (local_pose) {
    set_has_local_pose();
  } else {
    clear_has_local_pose();
  }
}

// optional int32 num_range_data = 2;
inline bool Submap2D::has_num_range_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Submap2D::set_has_num_range_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Submap2D::clear_has_num_range_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Submap2D::clear_num_range_data() {
  num_range_data_ = 0;
  clear_has_num_range_data();
}
inline ::google::protobuf::int32 Submap2D::num_range_data() const {
  return num_range_data_;
}
inline void Submap2D::set_num_range_data(::google::protobuf::int32 value) {
  set_has_num_range_data();
  num_range_data_ = value;
}

// optional bool finished = 3;
inline bool Submap2D::has_finished() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Submap2D::set_has_finished() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Submap2D::clear_has_finished() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Submap2D::clear_finished() {
  finished_ = false;
  clear_has_finished();
}
inline bool Submap2D::finished() const {
  return finished_;
}
inline void Submap2D::set_finished(bool value) {
  set_has_finished();
  finished_ = value;
}

// optional .cartographer.mapping_2d.proto.ProbabilityGrid probability_grid = 4;
inline bool Submap2D::has_probability_grid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Submap2D::set_has_probability_grid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Submap2D::clear_has_probability_grid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Submap2D::clear_probability_grid() {
  if (probability_grid_ != NULL) probability_grid_->::cartographer::mapping_2d::proto::ProbabilityGrid::Clear();
  clear_has_probability_grid();
}
inline const ::cartographer::mapping_2d::proto::ProbabilityGrid& Submap2D::probability_grid() const {
  return probability_grid_ != NULL ? *probability_grid_ : *default_instance_->probability_grid_;
}
inline ::cartographer::mapping_2d::proto::ProbabilityGrid* Submap2D::mutable_probability_grid() {
  set_has_probability_grid();
  if (probability_grid_ == NULL) probability_grid_ = new ::cartographer::mapping_2d::proto::ProbabilityGrid;
  return probability_grid_;
}
inline ::cartographer::mapping_2d::proto::ProbabilityGrid* Submap2D::release_probability_grid() {
  clear_has_probability_grid();
  ::cartographer::mapping_2d::proto::ProbabilityGrid* temp = probability_grid_;
  probability_grid_ = NULL;
  return temp;
}
inline void Submap2D::set_allocated_probability_grid(::cartographer::mapping_2d::proto::ProbabilityGrid* probability_grid) {
  delete probability_grid_;
  probability_grid_ = probability_grid;
  if (probability_grid) {
    set_has_probability_grid();
  } else {
    clear_has_probability_grid();
  }
}

// -------------------------------------------------------------------

// Submap3D

// optional .cartographer.transform.proto.Rigid3d local_pose = 1;
inline bool Submap3D::has_local_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Submap3D::set_has_local_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Submap3D::clear_has_local_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Submap3D::clear_local_pose() {
  if (local_pose_ != NULL) local_pose_->::cartographer::transform::proto::Rigid3d::Clear();
  clear_has_local_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& Submap3D::local_pose() const {
  return local_pose_ != NULL ? *local_pose_ : *default_instance_->local_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Submap3D::mutable_local_pose() {
  set_has_local_pose();
  if (local_pose_ == NULL) local_pose_ = new ::cartographer::transform::proto::Rigid3d;
  return local_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Submap3D::release_local_pose() {
  clear_has_local_pose();
  ::cartographer::transform::proto::Rigid3d* temp = local_pose_;
  local_pose_ = NULL;
  return temp;
}
inline void Submap3D::set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose) {
  delete local_pose_;
  local_pose_ = local_pose;
  if (local_pose) {
    set_has_local_pose();
  } else {
    clear_has_local_pose();
  }
}

// optional int32 num_range_data = 2;
inline bool Submap3D::has_num_range_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Submap3D::set_has_num_range_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Submap3D::clear_has_num_range_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Submap3D::clear_num_range_data() {
  num_range_data_ = 0;
  clear_has_num_range_data();
}
inline ::google::protobuf::int32 Submap3D::num_range_data() const {
  return num_range_data_;
}
inline void Submap3D::set_num_range_data(::google::protobuf::int32 value) {
  set_has_num_range_data();
  num_range_data_ = value;
}

// optional bool finished = 3;
inline bool Submap3D::has_finished() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Submap3D::set_has_finished() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Submap3D::clear_has_finished() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Submap3D::clear_finished() {
  finished_ = false;
  clear_has_finished();
}
inline bool Submap3D::finished() const {
  return finished_;
}
inline void Submap3D::set_finished(bool value) {
  set_has_finished();
  finished_ = value;
}

// optional .cartographer.mapping_3d.proto.HybridGrid high_resolution_hybrid_grid = 4;
inline bool Submap3D::has_high_resolution_hybrid_grid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Submap3D::set_has_high_resolution_hybrid_grid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Submap3D::clear_has_high_resolution_hybrid_grid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Submap3D::clear_high_resolution_hybrid_grid() {
  if (high_resolution_hybrid_grid_ != NULL) high_resolution_hybrid_grid_->::cartographer::mapping_3d::proto::HybridGrid::Clear();
  clear_has_high_resolution_hybrid_grid();
}
inline const ::cartographer::mapping_3d::proto::HybridGrid& Submap3D::high_resolution_hybrid_grid() const {
  return high_resolution_hybrid_grid_ != NULL ? *high_resolution_hybrid_grid_ : *default_instance_->high_resolution_hybrid_grid_;
}
inline ::cartographer::mapping_3d::proto::HybridGrid* Submap3D::mutable_high_resolution_hybrid_grid() {
  set_has_high_resolution_hybrid_grid();
  if (high_resolution_hybrid_grid_ == NULL) high_resolution_hybrid_grid_ = new ::cartographer::mapping_3d::proto::HybridGrid;
  return high_resolution_hybrid_grid_;
}
inline ::cartographer::mapping_3d::proto::HybridGrid* Submap3D::release_high_resolution_hybrid_grid() {
  clear_has_high_resolution_hybrid_grid();
  ::cartographer::mapping_3d::proto::HybridGrid* temp = high_resolution_hybrid_grid_;
  high_resolution_hybrid_grid_ = NULL;
  return temp;
}
inline void Submap3D::set_allocated_high_resolution_hybrid_grid(::cartographer::mapping_3d::proto::HybridGrid* high_resolution_hybrid_grid) {
  delete high_resolution_hybrid_grid_;
  high_resolution_hybrid_grid_ = high_resolution_hybrid_grid;
  if (high_resolution_hybrid_grid) {
    set_has_high_resolution_hybrid_grid();
  } else {
    clear_has_high_resolution_hybrid_grid();
  }
}

// optional .cartographer.mapping_3d.proto.HybridGrid low_resolution_hybrid_grid = 5;
inline bool Submap3D::has_low_resolution_hybrid_grid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Submap3D::set_has_low_resolution_hybrid_grid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Submap3D::clear_has_low_resolution_hybrid_grid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Submap3D::clear_low_resolution_hybrid_grid() {
  if (low_resolution_hybrid_grid_ != NULL) low_resolution_hybrid_grid_->::cartographer::mapping_3d::proto::HybridGrid::Clear();
  clear_has_low_resolution_hybrid_grid();
}
inline const ::cartographer::mapping_3d::proto::HybridGrid& Submap3D::low_resolution_hybrid_grid() const {
  return low_resolution_hybrid_grid_ != NULL ? *low_resolution_hybrid_grid_ : *default_instance_->low_resolution_hybrid_grid_;
}
inline ::cartographer::mapping_3d::proto::HybridGrid* Submap3D::mutable_low_resolution_hybrid_grid() {
  set_has_low_resolution_hybrid_grid();
  if (low_resolution_hybrid_grid_ == NULL) low_resolution_hybrid_grid_ = new ::cartographer::mapping_3d::proto::HybridGrid;
  return low_resolution_hybrid_grid_;
}
inline ::cartographer::mapping_3d::proto::HybridGrid* Submap3D::release_low_resolution_hybrid_grid() {
  clear_has_low_resolution_hybrid_grid();
  ::cartographer::mapping_3d::proto::HybridGrid* temp = low_resolution_hybrid_grid_;
  low_resolution_hybrid_grid_ = NULL;
  return temp;
}
inline void Submap3D::set_allocated_low_resolution_hybrid_grid(::cartographer::mapping_3d::proto::HybridGrid* low_resolution_hybrid_grid) {
  delete low_resolution_hybrid_grid_;
  low_resolution_hybrid_grid_ = low_resolution_hybrid_grid;
  if (low_resolution_hybrid_grid) {
    set_has_low_resolution_hybrid_grid();
  } else {
    clear_has_low_resolution_hybrid_grid();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fsubmap_2eproto__INCLUDED
