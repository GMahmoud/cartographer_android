// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/submap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Submap2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Submap2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Submap3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Submap3D_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/submap.proto");
  GOOGLE_CHECK(file != NULL);
  Submap2D_descriptor_ = file->message_type(0);
  static const int Submap2D_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap2D, local_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap2D, num_range_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap2D, finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap2D, probability_grid_),
  };
  Submap2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Submap2D_descriptor_,
      Submap2D::default_instance_,
      Submap2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Submap2D));
  Submap3D_descriptor_ = file->message_type(1);
  static const int Submap3D_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap3D, local_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap3D, num_range_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap3D, finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap3D, high_resolution_hybrid_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap3D, low_resolution_hybrid_grid_),
  };
  Submap3D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Submap3D_descriptor_,
      Submap3D::default_instance_,
      Submap3D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap3D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap3D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Submap3D));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Submap2D_descriptor_, &Submap2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Submap3D_descriptor_, &Submap3D::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_2eproto() {
  delete Submap2D::default_instance_;
  delete Submap2D_reflection_;
  delete Submap3D::default_instance_;
  delete Submap3D_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping_2d::proto::protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto();
  ::cartographer::mapping_3d::proto::protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2fhybrid_5fgrid_2eproto();
  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'cartographer/mapping/proto/submap.prot"
    "o\022\032cartographer.mapping.proto\0324cartograp"
    "her/mapping_2d/proto/probability_grid.pr"
    "oto\032/cartographer/mapping_3d/proto/hybri"
    "d_grid.proto\032,cartographer/transform/pro"
    "to/transform.proto\"\271\001\n\010Submap2D\0229\n\nlocal"
    "_pose\030\001 \001(\0132%.cartographer.transform.pro"
    "to.Rigid3d\022\026\n\016num_range_data\030\002 \001(\005\022\020\n\010fi"
    "nished\030\003 \001(\010\022H\n\020probability_grid\030\004 \001(\0132."
    ".cartographer.mapping_2d.proto.Probabili"
    "tyGrid\"\216\002\n\010Submap3D\0229\n\nlocal_pose\030\001 \001(\0132"
    "%.cartographer.transform.proto.Rigid3d\022\026"
    "\n\016num_range_data\030\002 \001(\005\022\020\n\010finished\030\003 \001(\010"
    "\022N\n\033high_resolution_hybrid_grid\030\004 \001(\0132)."
    "cartographer.mapping_3d.proto.HybridGrid"
    "\022M\n\032low_resolution_hybrid_grid\030\005 \001(\0132).c"
    "artographer.mapping_3d.proto.HybridGrid", 679);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/submap.proto", &protobuf_RegisterTypes);
  Submap2D::default_instance_ = new Submap2D();
  Submap3D::default_instance_ = new Submap3D();
  Submap2D::default_instance_->InitAsDefaultInstance();
  Submap3D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fsubmap_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fsubmap_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fsubmap_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Submap2D::kLocalPoseFieldNumber;
const int Submap2D::kNumRangeDataFieldNumber;
const int Submap2D::kFinishedFieldNumber;
const int Submap2D::kProbabilityGridFieldNumber;
#endif  // !_MSC_VER

Submap2D::Submap2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Submap2D::InitAsDefaultInstance() {
  local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
  probability_grid_ = const_cast< ::cartographer::mapping_2d::proto::ProbabilityGrid*>(&::cartographer::mapping_2d::proto::ProbabilityGrid::default_instance());
}

Submap2D::Submap2D(const Submap2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Submap2D::SharedCtor() {
  _cached_size_ = 0;
  local_pose_ = NULL;
  num_range_data_ = 0;
  finished_ = false;
  probability_grid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Submap2D::~Submap2D() {
  SharedDtor();
}

void Submap2D::SharedDtor() {
  if (this != default_instance_) {
    delete local_pose_;
    delete probability_grid_;
  }
}

void Submap2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Submap2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Submap2D_descriptor_;
}

const Submap2D& Submap2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  return *default_instance_;
}

Submap2D* Submap2D::default_instance_ = NULL;

Submap2D* Submap2D::New() const {
  return new Submap2D;
}

void Submap2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_local_pose()) {
      if (local_pose_ != NULL) local_pose_->::cartographer::transform::proto::Rigid3d::Clear();
    }
    num_range_data_ = 0;
    finished_ = false;
    if (has_probability_grid()) {
      if (probability_grid_ != NULL) probability_grid_->::cartographer::mapping_2d::proto::ProbabilityGrid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Submap2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_range_data;
        break;
      }

      // optional int32 num_range_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_range_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_range_data_)));
          set_has_num_range_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finished;
        break;
      }

      // optional bool finished = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
          set_has_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_probability_grid;
        break;
      }

      // optional .cartographer.mapping_2d.proto.ProbabilityGrid probability_grid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_probability_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_probability_grid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Submap2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->local_pose(), output);
  }

  // optional int32 num_range_data = 2;
  if (has_num_range_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_range_data(), output);
  }

  // optional bool finished = 3;
  if (has_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finished(), output);
  }

  // optional .cartographer.mapping_2d.proto.ProbabilityGrid probability_grid = 4;
  if (has_probability_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->probability_grid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Submap2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->local_pose(), target);
  }

  // optional int32 num_range_data = 2;
  if (has_num_range_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_range_data(), target);
  }

  // optional bool finished = 3;
  if (has_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finished(), target);
  }

  // optional .cartographer.mapping_2d.proto.ProbabilityGrid probability_grid = 4;
  if (has_probability_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->probability_grid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Submap2D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
    if (has_local_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->local_pose());
    }

    // optional int32 num_range_data = 2;
    if (has_num_range_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_range_data());
    }

    // optional bool finished = 3;
    if (has_finished()) {
      total_size += 1 + 1;
    }

    // optional .cartographer.mapping_2d.proto.ProbabilityGrid probability_grid = 4;
    if (has_probability_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->probability_grid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Submap2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Submap2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Submap2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Submap2D::MergeFrom(const Submap2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_pose()) {
      mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
    }
    if (from.has_num_range_data()) {
      set_num_range_data(from.num_range_data());
    }
    if (from.has_finished()) {
      set_finished(from.finished());
    }
    if (from.has_probability_grid()) {
      mutable_probability_grid()->::cartographer::mapping_2d::proto::ProbabilityGrid::MergeFrom(from.probability_grid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Submap2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Submap2D::CopyFrom(const Submap2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submap2D::IsInitialized() const {

  return true;
}

void Submap2D::Swap(Submap2D* other) {
  if (other != this) {
    std::swap(local_pose_, other->local_pose_);
    std::swap(num_range_data_, other->num_range_data_);
    std::swap(finished_, other->finished_);
    std::swap(probability_grid_, other->probability_grid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Submap2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Submap2D_descriptor_;
  metadata.reflection = Submap2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Submap3D::kLocalPoseFieldNumber;
const int Submap3D::kNumRangeDataFieldNumber;
const int Submap3D::kFinishedFieldNumber;
const int Submap3D::kHighResolutionHybridGridFieldNumber;
const int Submap3D::kLowResolutionHybridGridFieldNumber;
#endif  // !_MSC_VER

Submap3D::Submap3D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Submap3D::InitAsDefaultInstance() {
  local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
  high_resolution_hybrid_grid_ = const_cast< ::cartographer::mapping_3d::proto::HybridGrid*>(&::cartographer::mapping_3d::proto::HybridGrid::default_instance());
  low_resolution_hybrid_grid_ = const_cast< ::cartographer::mapping_3d::proto::HybridGrid*>(&::cartographer::mapping_3d::proto::HybridGrid::default_instance());
}

Submap3D::Submap3D(const Submap3D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Submap3D::SharedCtor() {
  _cached_size_ = 0;
  local_pose_ = NULL;
  num_range_data_ = 0;
  finished_ = false;
  high_resolution_hybrid_grid_ = NULL;
  low_resolution_hybrid_grid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Submap3D::~Submap3D() {
  SharedDtor();
}

void Submap3D::SharedDtor() {
  if (this != default_instance_) {
    delete local_pose_;
    delete high_resolution_hybrid_grid_;
    delete low_resolution_hybrid_grid_;
  }
}

void Submap3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Submap3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Submap3D_descriptor_;
}

const Submap3D& Submap3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  return *default_instance_;
}

Submap3D* Submap3D::default_instance_ = NULL;

Submap3D* Submap3D::New() const {
  return new Submap3D;
}

void Submap3D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_local_pose()) {
      if (local_pose_ != NULL) local_pose_->::cartographer::transform::proto::Rigid3d::Clear();
    }
    num_range_data_ = 0;
    finished_ = false;
    if (has_high_resolution_hybrid_grid()) {
      if (high_resolution_hybrid_grid_ != NULL) high_resolution_hybrid_grid_->::cartographer::mapping_3d::proto::HybridGrid::Clear();
    }
    if (has_low_resolution_hybrid_grid()) {
      if (low_resolution_hybrid_grid_ != NULL) low_resolution_hybrid_grid_->::cartographer::mapping_3d::proto::HybridGrid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Submap3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_range_data;
        break;
      }

      // optional int32 num_range_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_range_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_range_data_)));
          set_has_num_range_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finished;
        break;
      }

      // optional bool finished = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
          set_has_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_high_resolution_hybrid_grid;
        break;
      }

      // optional .cartographer.mapping_3d.proto.HybridGrid high_resolution_hybrid_grid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_high_resolution_hybrid_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_resolution_hybrid_grid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_low_resolution_hybrid_grid;
        break;
      }

      // optional .cartographer.mapping_3d.proto.HybridGrid low_resolution_hybrid_grid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_low_resolution_hybrid_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_resolution_hybrid_grid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Submap3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->local_pose(), output);
  }

  // optional int32 num_range_data = 2;
  if (has_num_range_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_range_data(), output);
  }

  // optional bool finished = 3;
  if (has_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finished(), output);
  }

  // optional .cartographer.mapping_3d.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (has_high_resolution_hybrid_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->high_resolution_hybrid_grid(), output);
  }

  // optional .cartographer.mapping_3d.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (has_low_resolution_hybrid_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->low_resolution_hybrid_grid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Submap3D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->local_pose(), target);
  }

  // optional int32 num_range_data = 2;
  if (has_num_range_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_range_data(), target);
  }

  // optional bool finished = 3;
  if (has_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finished(), target);
  }

  // optional .cartographer.mapping_3d.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (has_high_resolution_hybrid_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->high_resolution_hybrid_grid(), target);
  }

  // optional .cartographer.mapping_3d.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (has_low_resolution_hybrid_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->low_resolution_hybrid_grid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Submap3D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
    if (has_local_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->local_pose());
    }

    // optional int32 num_range_data = 2;
    if (has_num_range_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_range_data());
    }

    // optional bool finished = 3;
    if (has_finished()) {
      total_size += 1 + 1;
    }

    // optional .cartographer.mapping_3d.proto.HybridGrid high_resolution_hybrid_grid = 4;
    if (has_high_resolution_hybrid_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->high_resolution_hybrid_grid());
    }

    // optional .cartographer.mapping_3d.proto.HybridGrid low_resolution_hybrid_grid = 5;
    if (has_low_resolution_hybrid_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->low_resolution_hybrid_grid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Submap3D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Submap3D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Submap3D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Submap3D::MergeFrom(const Submap3D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_pose()) {
      mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
    }
    if (from.has_num_range_data()) {
      set_num_range_data(from.num_range_data());
    }
    if (from.has_finished()) {
      set_finished(from.finished());
    }
    if (from.has_high_resolution_hybrid_grid()) {
      mutable_high_resolution_hybrid_grid()->::cartographer::mapping_3d::proto::HybridGrid::MergeFrom(from.high_resolution_hybrid_grid());
    }
    if (from.has_low_resolution_hybrid_grid()) {
      mutable_low_resolution_hybrid_grid()->::cartographer::mapping_3d::proto::HybridGrid::MergeFrom(from.low_resolution_hybrid_grid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Submap3D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Submap3D::CopyFrom(const Submap3D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submap3D::IsInitialized() const {

  return true;
}

void Submap3D::Swap(Submap3D* other) {
  if (other != this) {
    std::swap(local_pose_, other->local_pose_);
    std::swap(num_range_data_, other->num_range_data_);
    std::swap(finished_, other->finished_);
    std::swap(high_resolution_hybrid_grid_, other->high_resolution_hybrid_grid_);
    std::swap(low_resolution_hybrid_grid_, other->low_resolution_hybrid_grid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Submap3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Submap3D_descriptor_;
  metadata.reflection = Submap3D_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
