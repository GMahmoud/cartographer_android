// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap_visualization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/submap_visualization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* SubmapList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmapList_SubmapEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapList_SubmapEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmapList_TrajectorySubmapList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapList_TrajectorySubmapList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmapQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmapQuery_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapQuery_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmapQuery_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapQuery_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/submap_visualization.proto");
  GOOGLE_CHECK(file != NULL);
  SubmapList_descriptor_ = file->message_type(0);
  static const int SubmapList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList, trajectory_),
  };
  SubmapList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmapList_descriptor_,
      SubmapList::default_instance_,
      SubmapList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmapList));
  SubmapList_SubmapEntry_descriptor_ = SubmapList_descriptor_->nested_type(0);
  static const int SubmapList_SubmapEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_SubmapEntry, submap_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_SubmapEntry, pose_),
  };
  SubmapList_SubmapEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmapList_SubmapEntry_descriptor_,
      SubmapList_SubmapEntry::default_instance_,
      SubmapList_SubmapEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_SubmapEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_SubmapEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmapList_SubmapEntry));
  SubmapList_TrajectorySubmapList_descriptor_ = SubmapList_descriptor_->nested_type(1);
  static const int SubmapList_TrajectorySubmapList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_TrajectorySubmapList, submap_),
  };
  SubmapList_TrajectorySubmapList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmapList_TrajectorySubmapList_descriptor_,
      SubmapList_TrajectorySubmapList::default_instance_,
      SubmapList_TrajectorySubmapList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_TrajectorySubmapList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_TrajectorySubmapList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmapList_TrajectorySubmapList));
  SubmapQuery_descriptor_ = file->message_type(1);
  static const int SubmapQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery, response_),
  };
  SubmapQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmapQuery_descriptor_,
      SubmapQuery::default_instance_,
      SubmapQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmapQuery));
  SubmapQuery_Request_descriptor_ = SubmapQuery_descriptor_->nested_type(0);
  static const int SubmapQuery_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Request, submap_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Request, trajectory_id_),
  };
  SubmapQuery_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmapQuery_Request_descriptor_,
      SubmapQuery_Request::default_instance_,
      SubmapQuery_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmapQuery_Request));
  SubmapQuery_Response_descriptor_ = SubmapQuery_descriptor_->nested_type(1);
  static const int SubmapQuery_Response_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, submap_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, slice_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, error_message_),
  };
  SubmapQuery_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmapQuery_Response_descriptor_,
      SubmapQuery_Response::default_instance_,
      SubmapQuery_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmapQuery_Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmapList_descriptor_, &SubmapList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmapList_SubmapEntry_descriptor_, &SubmapList_SubmapEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmapList_TrajectorySubmapList_descriptor_, &SubmapList_TrajectorySubmapList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmapQuery_descriptor_, &SubmapQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmapQuery_Request_descriptor_, &SubmapQuery_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmapQuery_Response_descriptor_, &SubmapQuery_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  delete SubmapList::default_instance_;
  delete SubmapList_reflection_;
  delete SubmapList_SubmapEntry::default_instance_;
  delete SubmapList_SubmapEntry_reflection_;
  delete SubmapList_TrajectorySubmapList::default_instance_;
  delete SubmapList_TrajectorySubmapList_reflection_;
  delete SubmapQuery::default_instance_;
  delete SubmapQuery_reflection_;
  delete SubmapQuery_Request::default_instance_;
  delete SubmapQuery_Request_reflection_;
  delete SubmapQuery_Response::default_instance_;
  delete SubmapQuery_Response_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n5cartographer/mapping/proto/submap_visu"
    "alization.proto\022\032cartographer.mapping.pr"
    "oto\032,cartographer/transform/proto/transf"
    "orm.proto\"\225\002\n\nSubmapList\022O\n\ntrajectory\030\002"
    " \003(\0132;.cartographer.mapping.proto.Submap"
    "List.TrajectorySubmapList\032Z\n\013SubmapEntry"
    "\022\026\n\016submap_version\030\001 \001(\005\0223\n\004pose\030\003 \001(\0132%"
    ".cartographer.transform.proto.Rigid3d\032Z\n"
    "\024TrajectorySubmapList\022B\n\006submap\030\001 \003(\01322."
    "cartographer.mapping.proto.SubmapList.Su"
    "bmapEntry\"\204\003\n\013SubmapQuery\022@\n\007request\030\001 \001"
    "(\0132/.cartographer.mapping.proto.SubmapQu"
    "ery.Request\022B\n\010response\030\002 \001(\01320.cartogra"
    "pher.mapping.proto.SubmapQuery.Response\032"
    "6\n\007Request\022\024\n\014submap_index\030\001 \001(\005\022\025\n\rtraj"
    "ectory_id\030\002 \001(\005\032\266\001\n\010Response\022\026\n\016submap_v"
    "ersion\030\002 \001(\005\022\r\n\005cells\030\003 \001(\014\022\r\n\005width\030\004 \001"
    "(\005\022\016\n\006height\030\005 \001(\005\022\022\n\nresolution\030\006 \001(\001\0229"
    "\n\nslice_pose\030\t \001(\0132%.cartographer.transf"
    "orm.proto.Rigid3d\022\025\n\rerror_message\030\010 \001(\t", 800);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/submap_visualization.proto", &protobuf_RegisterTypes);
  SubmapList::default_instance_ = new SubmapList();
  SubmapList_SubmapEntry::default_instance_ = new SubmapList_SubmapEntry();
  SubmapList_TrajectorySubmapList::default_instance_ = new SubmapList_TrajectorySubmapList();
  SubmapQuery::default_instance_ = new SubmapQuery();
  SubmapQuery_Request::default_instance_ = new SubmapQuery_Request();
  SubmapQuery_Response::default_instance_ = new SubmapQuery_Response();
  SubmapList::default_instance_->InitAsDefaultInstance();
  SubmapList_SubmapEntry::default_instance_->InitAsDefaultInstance();
  SubmapList_TrajectorySubmapList::default_instance_->InitAsDefaultInstance();
  SubmapQuery::default_instance_->InitAsDefaultInstance();
  SubmapQuery_Request::default_instance_->InitAsDefaultInstance();
  SubmapQuery_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SubmapList_SubmapEntry::kSubmapVersionFieldNumber;
const int SubmapList_SubmapEntry::kPoseFieldNumber;
#endif  // !_MSC_VER

SubmapList_SubmapEntry::SubmapList_SubmapEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmapList_SubmapEntry::InitAsDefaultInstance() {
  pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

SubmapList_SubmapEntry::SubmapList_SubmapEntry(const SubmapList_SubmapEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmapList_SubmapEntry::SharedCtor() {
  _cached_size_ = 0;
  submap_version_ = 0;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmapList_SubmapEntry::~SubmapList_SubmapEntry() {
  SharedDtor();
}

void SubmapList_SubmapEntry::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void SubmapList_SubmapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapList_SubmapEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapList_SubmapEntry_descriptor_;
}

const SubmapList_SubmapEntry& SubmapList_SubmapEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapList_SubmapEntry* SubmapList_SubmapEntry::default_instance_ = NULL;

SubmapList_SubmapEntry* SubmapList_SubmapEntry::New() const {
  return new SubmapList_SubmapEntry;
}

void SubmapList_SubmapEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    submap_version_ = 0;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::cartographer::transform::proto::Rigid3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmapList_SubmapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 submap_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_version_)));
          set_has_submap_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d pose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmapList_SubmapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 submap_version = 1;
  if (has_submap_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->submap_version(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 3;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmapList_SubmapEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 submap_version = 1;
  if (has_submap_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->submap_version(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 3;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmapList_SubmapEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 submap_version = 1;
    if (has_submap_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->submap_version());
    }

    // optional .cartographer.transform.proto.Rigid3d pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapList_SubmapEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmapList_SubmapEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmapList_SubmapEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmapList_SubmapEntry::MergeFrom(const SubmapList_SubmapEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_submap_version()) {
      set_submap_version(from.submap_version());
    }
    if (from.has_pose()) {
      mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmapList_SubmapEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList_SubmapEntry::CopyFrom(const SubmapList_SubmapEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList_SubmapEntry::IsInitialized() const {

  return true;
}

void SubmapList_SubmapEntry::Swap(SubmapList_SubmapEntry* other) {
  if (other != this) {
    std::swap(submap_version_, other->submap_version_);
    std::swap(pose_, other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmapList_SubmapEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapList_SubmapEntry_descriptor_;
  metadata.reflection = SubmapList_SubmapEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SubmapList_TrajectorySubmapList::kSubmapFieldNumber;
#endif  // !_MSC_VER

SubmapList_TrajectorySubmapList::SubmapList_TrajectorySubmapList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmapList_TrajectorySubmapList::InitAsDefaultInstance() {
}

SubmapList_TrajectorySubmapList::SubmapList_TrajectorySubmapList(const SubmapList_TrajectorySubmapList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmapList_TrajectorySubmapList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmapList_TrajectorySubmapList::~SubmapList_TrajectorySubmapList() {
  SharedDtor();
}

void SubmapList_TrajectorySubmapList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubmapList_TrajectorySubmapList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapList_TrajectorySubmapList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapList_TrajectorySubmapList_descriptor_;
}

const SubmapList_TrajectorySubmapList& SubmapList_TrajectorySubmapList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapList_TrajectorySubmapList* SubmapList_TrajectorySubmapList::default_instance_ = NULL;

SubmapList_TrajectorySubmapList* SubmapList_TrajectorySubmapList::New() const {
  return new SubmapList_TrajectorySubmapList;
}

void SubmapList_TrajectorySubmapList::Clear() {
  submap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmapList_TrajectorySubmapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_submap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_submap;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmapList_TrajectorySubmapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  for (int i = 0; i < this->submap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->submap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmapList_TrajectorySubmapList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  for (int i = 0; i < this->submap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->submap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmapList_TrajectorySubmapList::ByteSize() const {
  int total_size = 0;

  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  total_size += 1 * this->submap_size();
  for (int i = 0; i < this->submap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->submap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapList_TrajectorySubmapList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmapList_TrajectorySubmapList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmapList_TrajectorySubmapList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmapList_TrajectorySubmapList::MergeFrom(const SubmapList_TrajectorySubmapList& from) {
  GOOGLE_CHECK_NE(&from, this);
  submap_.MergeFrom(from.submap_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmapList_TrajectorySubmapList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList_TrajectorySubmapList::CopyFrom(const SubmapList_TrajectorySubmapList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList_TrajectorySubmapList::IsInitialized() const {

  return true;
}

void SubmapList_TrajectorySubmapList::Swap(SubmapList_TrajectorySubmapList* other) {
  if (other != this) {
    submap_.Swap(&other->submap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmapList_TrajectorySubmapList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapList_TrajectorySubmapList_descriptor_;
  metadata.reflection = SubmapList_TrajectorySubmapList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SubmapList::kTrajectoryFieldNumber;
#endif  // !_MSC_VER

SubmapList::SubmapList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmapList::InitAsDefaultInstance() {
}

SubmapList::SubmapList(const SubmapList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmapList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmapList::~SubmapList() {
  SharedDtor();
}

void SubmapList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubmapList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapList_descriptor_;
}

const SubmapList& SubmapList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapList* SubmapList::default_instance_ = NULL;

SubmapList* SubmapList::New() const {
  return new SubmapList;
}

void SubmapList::Clear() {
  trajectory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trajectory;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  for (int i = 0; i < this->trajectory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trajectory(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmapList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  for (int i = 0; i < this->trajectory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trajectory(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmapList::ByteSize() const {
  int total_size = 0;

  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  total_size += 1 * this->trajectory_size();
  for (int i = 0; i < this->trajectory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectory(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmapList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmapList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmapList::MergeFrom(const SubmapList& from) {
  GOOGLE_CHECK_NE(&from, this);
  trajectory_.MergeFrom(from.trajectory_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmapList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList::CopyFrom(const SubmapList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList::IsInitialized() const {

  return true;
}

void SubmapList::Swap(SubmapList* other) {
  if (other != this) {
    trajectory_.Swap(&other->trajectory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmapList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapList_descriptor_;
  metadata.reflection = SubmapList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubmapQuery_Request::kSubmapIndexFieldNumber;
const int SubmapQuery_Request::kTrajectoryIdFieldNumber;
#endif  // !_MSC_VER

SubmapQuery_Request::SubmapQuery_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmapQuery_Request::InitAsDefaultInstance() {
}

SubmapQuery_Request::SubmapQuery_Request(const SubmapQuery_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmapQuery_Request::SharedCtor() {
  _cached_size_ = 0;
  submap_index_ = 0;
  trajectory_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmapQuery_Request::~SubmapQuery_Request() {
  SharedDtor();
}

void SubmapQuery_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubmapQuery_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapQuery_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapQuery_Request_descriptor_;
}

const SubmapQuery_Request& SubmapQuery_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapQuery_Request* SubmapQuery_Request::default_instance_ = NULL;

SubmapQuery_Request* SubmapQuery_Request::New() const {
  return new SubmapQuery_Request;
}

void SubmapQuery_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    submap_index_ = 0;
    trajectory_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmapQuery_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 submap_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_index_)));
          set_has_submap_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trajectory_id;
        break;
      }

      // optional int32 trajectory_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trajectory_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
          set_has_trajectory_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmapQuery_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 submap_index = 1;
  if (has_submap_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->submap_index(), output);
  }

  // optional int32 trajectory_id = 2;
  if (has_trajectory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trajectory_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmapQuery_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 submap_index = 1;
  if (has_submap_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->submap_index(), target);
  }

  // optional int32 trajectory_id = 2;
  if (has_trajectory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trajectory_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmapQuery_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 submap_index = 1;
    if (has_submap_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->submap_index());
    }

    // optional int32 trajectory_id = 2;
    if (has_trajectory_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trajectory_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapQuery_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmapQuery_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmapQuery_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmapQuery_Request::MergeFrom(const SubmapQuery_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_submap_index()) {
      set_submap_index(from.submap_index());
    }
    if (from.has_trajectory_id()) {
      set_trajectory_id(from.trajectory_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmapQuery_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery_Request::CopyFrom(const SubmapQuery_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Request::IsInitialized() const {

  return true;
}

void SubmapQuery_Request::Swap(SubmapQuery_Request* other) {
  if (other != this) {
    std::swap(submap_index_, other->submap_index_);
    std::swap(trajectory_id_, other->trajectory_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmapQuery_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapQuery_Request_descriptor_;
  metadata.reflection = SubmapQuery_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SubmapQuery_Response::kSubmapVersionFieldNumber;
const int SubmapQuery_Response::kCellsFieldNumber;
const int SubmapQuery_Response::kWidthFieldNumber;
const int SubmapQuery_Response::kHeightFieldNumber;
const int SubmapQuery_Response::kResolutionFieldNumber;
const int SubmapQuery_Response::kSlicePoseFieldNumber;
const int SubmapQuery_Response::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

SubmapQuery_Response::SubmapQuery_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmapQuery_Response::InitAsDefaultInstance() {
  slice_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

SubmapQuery_Response::SubmapQuery_Response(const SubmapQuery_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmapQuery_Response::SharedCtor() {
  _cached_size_ = 0;
  submap_version_ = 0;
  cells_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_ = 0;
  height_ = 0;
  resolution_ = 0;
  slice_pose_ = NULL;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmapQuery_Response::~SubmapQuery_Response() {
  SharedDtor();
}

void SubmapQuery_Response::SharedDtor() {
  if (cells_ != &::google::protobuf::internal::kEmptyString) {
    delete cells_;
  }
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
    delete slice_pose_;
  }
}

void SubmapQuery_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapQuery_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapQuery_Response_descriptor_;
}

const SubmapQuery_Response& SubmapQuery_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapQuery_Response* SubmapQuery_Response::default_instance_ = NULL;

SubmapQuery_Response* SubmapQuery_Response::New() const {
  return new SubmapQuery_Response;
}

void SubmapQuery_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    submap_version_ = 0;
    if (has_cells()) {
      if (cells_ != &::google::protobuf::internal::kEmptyString) {
        cells_->clear();
      }
    }
    width_ = 0;
    height_ = 0;
    resolution_ = 0;
    if (has_slice_pose()) {
      if (slice_pose_ != NULL) slice_pose_->::cartographer::transform::proto::Rigid3d::Clear();
    }
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmapQuery_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 submap_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_version_)));
          set_has_submap_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        break;
      }

      // optional bytes cells = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_resolution;
        break;
      }

      // optional double resolution = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
          set_has_resolution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_error_message;
        break;
      }

      // optional string error_message = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_slice_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d slice_pose = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slice_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmapQuery_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 submap_version = 2;
  if (has_submap_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submap_version(), output);
  }

  // optional bytes cells = 3;
  if (has_cells()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->cells(), output);
  }

  // optional int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // optional double resolution = 6;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->resolution(), output);
  }

  // optional string error_message = 8;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->error_message(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d slice_pose = 9;
  if (has_slice_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->slice_pose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmapQuery_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 submap_version = 2;
  if (has_submap_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submap_version(), target);
  }

  // optional bytes cells = 3;
  if (has_cells()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cells(), target);
  }

  // optional int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // optional double resolution = 6;
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->resolution(), target);
  }

  // optional string error_message = 8;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->error_message(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d slice_pose = 9;
  if (has_slice_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->slice_pose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmapQuery_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 submap_version = 2;
    if (has_submap_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->submap_version());
    }

    // optional bytes cells = 3;
    if (has_cells()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cells());
    }

    // optional int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional double resolution = 6;
    if (has_resolution()) {
      total_size += 1 + 8;
    }

    // optional .cartographer.transform.proto.Rigid3d slice_pose = 9;
    if (has_slice_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slice_pose());
    }

    // optional string error_message = 8;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapQuery_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmapQuery_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmapQuery_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmapQuery_Response::MergeFrom(const SubmapQuery_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_submap_version()) {
      set_submap_version(from.submap_version());
    }
    if (from.has_cells()) {
      set_cells(from.cells());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
    if (from.has_slice_pose()) {
      mutable_slice_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.slice_pose());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmapQuery_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery_Response::CopyFrom(const SubmapQuery_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Response::IsInitialized() const {

  return true;
}

void SubmapQuery_Response::Swap(SubmapQuery_Response* other) {
  if (other != this) {
    std::swap(submap_version_, other->submap_version_);
    std::swap(cells_, other->cells_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(resolution_, other->resolution_);
    std::swap(slice_pose_, other->slice_pose_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmapQuery_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapQuery_Response_descriptor_;
  metadata.reflection = SubmapQuery_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SubmapQuery::kRequestFieldNumber;
const int SubmapQuery::kResponseFieldNumber;
#endif  // !_MSC_VER

SubmapQuery::SubmapQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmapQuery::InitAsDefaultInstance() {
  request_ = const_cast< ::cartographer::mapping::proto::SubmapQuery_Request*>(&::cartographer::mapping::proto::SubmapQuery_Request::default_instance());
  response_ = const_cast< ::cartographer::mapping::proto::SubmapQuery_Response*>(&::cartographer::mapping::proto::SubmapQuery_Response::default_instance());
}

SubmapQuery::SubmapQuery(const SubmapQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmapQuery::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmapQuery::~SubmapQuery() {
  SharedDtor();
}

void SubmapQuery::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void SubmapQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapQuery_descriptor_;
}

const SubmapQuery& SubmapQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapQuery* SubmapQuery::default_instance_ = NULL;

SubmapQuery* SubmapQuery::New() const {
  return new SubmapQuery;
}

void SubmapQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::cartographer::mapping::proto::SubmapQuery_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::cartographer::mapping::proto::SubmapQuery_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmapQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.SubmapQuery.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .cartographer.mapping.proto.SubmapQuery.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmapQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmapQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmapQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cartographer.mapping.proto.SubmapQuery.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .cartographer.mapping.proto.SubmapQuery.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmapQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmapQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmapQuery::MergeFrom(const SubmapQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::cartographer::mapping::proto::SubmapQuery_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::cartographer::mapping::proto::SubmapQuery_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmapQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery::CopyFrom(const SubmapQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery::IsInitialized() const {

  return true;
}

void SubmapQuery::Swap(SubmapQuery* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmapQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapQuery_descriptor_;
  metadata.reflection = SubmapQuery_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
