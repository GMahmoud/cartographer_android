// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap_visualization.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();

class SubmapList;
class SubmapList_SubmapEntry;
class SubmapList_TrajectorySubmapList;
class SubmapQuery;
class SubmapQuery_Request;
class SubmapQuery_Response;

// ===================================================================

class SubmapList_SubmapEntry : public ::google::protobuf::Message {
 public:
  SubmapList_SubmapEntry();
  virtual ~SubmapList_SubmapEntry();

  SubmapList_SubmapEntry(const SubmapList_SubmapEntry& from);

  inline SubmapList_SubmapEntry& operator=(const SubmapList_SubmapEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapList_SubmapEntry& default_instance();

  void Swap(SubmapList_SubmapEntry* other);

  // implements Message ----------------------------------------------

  SubmapList_SubmapEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubmapList_SubmapEntry& from);
  void MergeFrom(const SubmapList_SubmapEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 submap_version = 1;
  inline bool has_submap_version() const;
  inline void clear_submap_version();
  static const int kSubmapVersionFieldNumber = 1;
  inline ::google::protobuf::int32 submap_version() const;
  inline void set_submap_version(::google::protobuf::int32 value);

  // optional .cartographer.transform.proto.Rigid3d pose = 3;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 3;
  inline const ::cartographer::transform::proto::Rigid3d& pose() const;
  inline ::cartographer::transform::proto::Rigid3d* mutable_pose();
  inline ::cartographer::transform::proto::Rigid3d* release_pose();
  inline void set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapList.SubmapEntry)
 private:
  inline void set_has_submap_version();
  inline void clear_has_submap_version();
  inline void set_has_pose();
  inline void clear_has_pose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::cartographer::transform::proto::Rigid3d* pose_;
  ::google::protobuf::int32 submap_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();

  void InitAsDefaultInstance();
  static SubmapList_SubmapEntry* default_instance_;
};
// -------------------------------------------------------------------

class SubmapList_TrajectorySubmapList : public ::google::protobuf::Message {
 public:
  SubmapList_TrajectorySubmapList();
  virtual ~SubmapList_TrajectorySubmapList();

  SubmapList_TrajectorySubmapList(const SubmapList_TrajectorySubmapList& from);

  inline SubmapList_TrajectorySubmapList& operator=(const SubmapList_TrajectorySubmapList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapList_TrajectorySubmapList& default_instance();

  void Swap(SubmapList_TrajectorySubmapList* other);

  // implements Message ----------------------------------------------

  SubmapList_TrajectorySubmapList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubmapList_TrajectorySubmapList& from);
  void MergeFrom(const SubmapList_TrajectorySubmapList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  inline int submap_size() const;
  inline void clear_submap();
  static const int kSubmapFieldNumber = 1;
  inline const ::cartographer::mapping::proto::SubmapList_SubmapEntry& submap(int index) const;
  inline ::cartographer::mapping::proto::SubmapList_SubmapEntry* mutable_submap(int index);
  inline ::cartographer::mapping::proto::SubmapList_SubmapEntry* add_submap();
  inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >&
      submap() const;
  inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >*
      mutable_submap();

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry > submap_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();

  void InitAsDefaultInstance();
  static SubmapList_TrajectorySubmapList* default_instance_;
};
// -------------------------------------------------------------------

class SubmapList : public ::google::protobuf::Message {
 public:
  SubmapList();
  virtual ~SubmapList();

  SubmapList(const SubmapList& from);

  inline SubmapList& operator=(const SubmapList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapList& default_instance();

  void Swap(SubmapList* other);

  // implements Message ----------------------------------------------

  SubmapList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubmapList& from);
  void MergeFrom(const SubmapList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SubmapList_SubmapEntry SubmapEntry;
  typedef SubmapList_TrajectorySubmapList TrajectorySubmapList;

  // accessors -------------------------------------------------------

  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  inline int trajectory_size() const;
  inline void clear_trajectory();
  static const int kTrajectoryFieldNumber = 2;
  inline const ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList& trajectory(int index) const;
  inline ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* mutable_trajectory(int index);
  inline ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* add_trajectory();
  inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >&
      trajectory() const;
  inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >*
      mutable_trajectory();

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList > trajectory_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();

  void InitAsDefaultInstance();
  static SubmapList* default_instance_;
};
// -------------------------------------------------------------------

class SubmapQuery_Request : public ::google::protobuf::Message {
 public:
  SubmapQuery_Request();
  virtual ~SubmapQuery_Request();

  SubmapQuery_Request(const SubmapQuery_Request& from);

  inline SubmapQuery_Request& operator=(const SubmapQuery_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapQuery_Request& default_instance();

  void Swap(SubmapQuery_Request* other);

  // implements Message ----------------------------------------------

  SubmapQuery_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubmapQuery_Request& from);
  void MergeFrom(const SubmapQuery_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 submap_index = 1;
  inline bool has_submap_index() const;
  inline void clear_submap_index();
  static const int kSubmapIndexFieldNumber = 1;
  inline ::google::protobuf::int32 submap_index() const;
  inline void set_submap_index(::google::protobuf::int32 value);

  // optional int32 trajectory_id = 2;
  inline bool has_trajectory_id() const;
  inline void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 2;
  inline ::google::protobuf::int32 trajectory_id() const;
  inline void set_trajectory_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapQuery.Request)
 private:
  inline void set_has_submap_index();
  inline void clear_has_submap_index();
  inline void set_has_trajectory_id();
  inline void clear_has_trajectory_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 submap_index_;
  ::google::protobuf::int32 trajectory_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();

  void InitAsDefaultInstance();
  static SubmapQuery_Request* default_instance_;
};
// -------------------------------------------------------------------

class SubmapQuery_Response : public ::google::protobuf::Message {
 public:
  SubmapQuery_Response();
  virtual ~SubmapQuery_Response();

  SubmapQuery_Response(const SubmapQuery_Response& from);

  inline SubmapQuery_Response& operator=(const SubmapQuery_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapQuery_Response& default_instance();

  void Swap(SubmapQuery_Response* other);

  // implements Message ----------------------------------------------

  SubmapQuery_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubmapQuery_Response& from);
  void MergeFrom(const SubmapQuery_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 submap_version = 2;
  inline bool has_submap_version() const;
  inline void clear_submap_version();
  static const int kSubmapVersionFieldNumber = 2;
  inline ::google::protobuf::int32 submap_version() const;
  inline void set_submap_version(::google::protobuf::int32 value);

  // optional bytes cells = 3;
  inline bool has_cells() const;
  inline void clear_cells();
  static const int kCellsFieldNumber = 3;
  inline const ::std::string& cells() const;
  inline void set_cells(const ::std::string& value);
  inline void set_cells(const char* value);
  inline void set_cells(const void* value, size_t size);
  inline ::std::string* mutable_cells();
  inline ::std::string* release_cells();
  inline void set_allocated_cells(::std::string* cells);

  // optional int32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional double resolution = 6;
  inline bool has_resolution() const;
  inline void clear_resolution();
  static const int kResolutionFieldNumber = 6;
  inline double resolution() const;
  inline void set_resolution(double value);

  // optional .cartographer.transform.proto.Rigid3d slice_pose = 9;
  inline bool has_slice_pose() const;
  inline void clear_slice_pose();
  static const int kSlicePoseFieldNumber = 9;
  inline const ::cartographer::transform::proto::Rigid3d& slice_pose() const;
  inline ::cartographer::transform::proto::Rigid3d* mutable_slice_pose();
  inline ::cartographer::transform::proto::Rigid3d* release_slice_pose();
  inline void set_allocated_slice_pose(::cartographer::transform::proto::Rigid3d* slice_pose);

  // optional string error_message = 8;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 8;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapQuery.Response)
 private:
  inline void set_has_submap_version();
  inline void clear_has_submap_version();
  inline void set_has_cells();
  inline void clear_has_cells();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_resolution();
  inline void clear_has_resolution();
  inline void set_has_slice_pose();
  inline void clear_has_slice_pose();
  inline void set_has_error_message();
  inline void clear_has_error_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cells_;
  ::google::protobuf::int32 submap_version_;
  ::google::protobuf::int32 width_;
  double resolution_;
  ::cartographer::transform::proto::Rigid3d* slice_pose_;
  ::std::string* error_message_;
  ::google::protobuf::int32 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();

  void InitAsDefaultInstance();
  static SubmapQuery_Response* default_instance_;
};
// -------------------------------------------------------------------

class SubmapQuery : public ::google::protobuf::Message {
 public:
  SubmapQuery();
  virtual ~SubmapQuery();

  SubmapQuery(const SubmapQuery& from);

  inline SubmapQuery& operator=(const SubmapQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapQuery& default_instance();

  void Swap(SubmapQuery* other);

  // implements Message ----------------------------------------------

  SubmapQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubmapQuery& from);
  void MergeFrom(const SubmapQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SubmapQuery_Request Request;
  typedef SubmapQuery_Response Response;

  // accessors -------------------------------------------------------

  // optional .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 1;
  inline const ::cartographer::mapping::proto::SubmapQuery_Request& request() const;
  inline ::cartographer::mapping::proto::SubmapQuery_Request* mutable_request();
  inline ::cartographer::mapping::proto::SubmapQuery_Request* release_request();
  inline void set_allocated_request(::cartographer::mapping::proto::SubmapQuery_Request* request);

  // optional .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 2;
  inline const ::cartographer::mapping::proto::SubmapQuery_Response& response() const;
  inline ::cartographer::mapping::proto::SubmapQuery_Response* mutable_response();
  inline ::cartographer::mapping::proto::SubmapQuery_Response* release_response();
  inline void set_allocated_response(::cartographer::mapping::proto::SubmapQuery_Response* response);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapQuery)
 private:
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::cartographer::mapping::proto::SubmapQuery_Request* request_;
  ::cartographer::mapping::proto::SubmapQuery_Response* response_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();

  void InitAsDefaultInstance();
  static SubmapQuery* default_instance_;
};
// ===================================================================


// ===================================================================

// SubmapList_SubmapEntry

// optional int32 submap_version = 1;
inline bool SubmapList_SubmapEntry::has_submap_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubmapList_SubmapEntry::set_has_submap_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubmapList_SubmapEntry::clear_has_submap_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubmapList_SubmapEntry::clear_submap_version() {
  submap_version_ = 0;
  clear_has_submap_version();
}
inline ::google::protobuf::int32 SubmapList_SubmapEntry::submap_version() const {
  return submap_version_;
}
inline void SubmapList_SubmapEntry::set_submap_version(::google::protobuf::int32 value) {
  set_has_submap_version();
  submap_version_ = value;
}

// optional .cartographer.transform.proto.Rigid3d pose = 3;
inline bool SubmapList_SubmapEntry::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubmapList_SubmapEntry::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubmapList_SubmapEntry::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubmapList_SubmapEntry::clear_pose() {
  if (pose_ != NULL) pose_->::cartographer::transform::proto::Rigid3d::Clear();
  clear_has_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& SubmapList_SubmapEntry::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapList_SubmapEntry::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::cartographer::transform::proto::Rigid3d;
  return pose_;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapList_SubmapEntry::release_pose() {
  clear_has_pose();
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void SubmapList_SubmapEntry::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
}

// -------------------------------------------------------------------

// SubmapList_TrajectorySubmapList

// repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
inline int SubmapList_TrajectorySubmapList::submap_size() const {
  return submap_.size();
}
inline void SubmapList_TrajectorySubmapList::clear_submap() {
  submap_.Clear();
}
inline const ::cartographer::mapping::proto::SubmapList_SubmapEntry& SubmapList_TrajectorySubmapList::submap(int index) const {
  return submap_.Get(index);
}
inline ::cartographer::mapping::proto::SubmapList_SubmapEntry* SubmapList_TrajectorySubmapList::mutable_submap(int index) {
  return submap_.Mutable(index);
}
inline ::cartographer::mapping::proto::SubmapList_SubmapEntry* SubmapList_TrajectorySubmapList::add_submap() {
  return submap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >&
SubmapList_TrajectorySubmapList::submap() const {
  return submap_;
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >*
SubmapList_TrajectorySubmapList::mutable_submap() {
  return &submap_;
}

// -------------------------------------------------------------------

// SubmapList

// repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
inline int SubmapList::trajectory_size() const {
  return trajectory_.size();
}
inline void SubmapList::clear_trajectory() {
  trajectory_.Clear();
}
inline const ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList& SubmapList::trajectory(int index) const {
  return trajectory_.Get(index);
}
inline ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* SubmapList::mutable_trajectory(int index) {
  return trajectory_.Mutable(index);
}
inline ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* SubmapList::add_trajectory() {
  return trajectory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >&
SubmapList::trajectory() const {
  return trajectory_;
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >*
SubmapList::mutable_trajectory() {
  return &trajectory_;
}

// -------------------------------------------------------------------

// SubmapQuery_Request

// optional int32 submap_index = 1;
inline bool SubmapQuery_Request::has_submap_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubmapQuery_Request::set_has_submap_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubmapQuery_Request::clear_has_submap_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubmapQuery_Request::clear_submap_index() {
  submap_index_ = 0;
  clear_has_submap_index();
}
inline ::google::protobuf::int32 SubmapQuery_Request::submap_index() const {
  return submap_index_;
}
inline void SubmapQuery_Request::set_submap_index(::google::protobuf::int32 value) {
  set_has_submap_index();
  submap_index_ = value;
}

// optional int32 trajectory_id = 2;
inline bool SubmapQuery_Request::has_trajectory_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubmapQuery_Request::set_has_trajectory_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubmapQuery_Request::clear_has_trajectory_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubmapQuery_Request::clear_trajectory_id() {
  trajectory_id_ = 0;
  clear_has_trajectory_id();
}
inline ::google::protobuf::int32 SubmapQuery_Request::trajectory_id() const {
  return trajectory_id_;
}
inline void SubmapQuery_Request::set_trajectory_id(::google::protobuf::int32 value) {
  set_has_trajectory_id();
  trajectory_id_ = value;
}

// -------------------------------------------------------------------

// SubmapQuery_Response

// optional int32 submap_version = 2;
inline bool SubmapQuery_Response::has_submap_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubmapQuery_Response::set_has_submap_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubmapQuery_Response::clear_has_submap_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubmapQuery_Response::clear_submap_version() {
  submap_version_ = 0;
  clear_has_submap_version();
}
inline ::google::protobuf::int32 SubmapQuery_Response::submap_version() const {
  return submap_version_;
}
inline void SubmapQuery_Response::set_submap_version(::google::protobuf::int32 value) {
  set_has_submap_version();
  submap_version_ = value;
}

// optional bytes cells = 3;
inline bool SubmapQuery_Response::has_cells() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubmapQuery_Response::set_has_cells() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubmapQuery_Response::clear_has_cells() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubmapQuery_Response::clear_cells() {
  if (cells_ != &::google::protobuf::internal::kEmptyString) {
    cells_->clear();
  }
  clear_has_cells();
}
inline const ::std::string& SubmapQuery_Response::cells() const {
  return *cells_;
}
inline void SubmapQuery_Response::set_cells(const ::std::string& value) {
  set_has_cells();
  if (cells_ == &::google::protobuf::internal::kEmptyString) {
    cells_ = new ::std::string;
  }
  cells_->assign(value);
}
inline void SubmapQuery_Response::set_cells(const char* value) {
  set_has_cells();
  if (cells_ == &::google::protobuf::internal::kEmptyString) {
    cells_ = new ::std::string;
  }
  cells_->assign(value);
}
inline void SubmapQuery_Response::set_cells(const void* value, size_t size) {
  set_has_cells();
  if (cells_ == &::google::protobuf::internal::kEmptyString) {
    cells_ = new ::std::string;
  }
  cells_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmapQuery_Response::mutable_cells() {
  set_has_cells();
  if (cells_ == &::google::protobuf::internal::kEmptyString) {
    cells_ = new ::std::string;
  }
  return cells_;
}
inline ::std::string* SubmapQuery_Response::release_cells() {
  clear_has_cells();
  if (cells_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cells_;
    cells_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SubmapQuery_Response::set_allocated_cells(::std::string* cells) {
  if (cells_ != &::google::protobuf::internal::kEmptyString) {
    delete cells_;
  }
  if (cells) {
    set_has_cells();
    cells_ = cells;
  } else {
    clear_has_cells();
    cells_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 width = 4;
inline bool SubmapQuery_Response::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubmapQuery_Response::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubmapQuery_Response::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubmapQuery_Response::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 SubmapQuery_Response::width() const {
  return width_;
}
inline void SubmapQuery_Response::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 5;
inline bool SubmapQuery_Response::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SubmapQuery_Response::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SubmapQuery_Response::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SubmapQuery_Response::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 SubmapQuery_Response::height() const {
  return height_;
}
inline void SubmapQuery_Response::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional double resolution = 6;
inline bool SubmapQuery_Response::has_resolution() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SubmapQuery_Response::set_has_resolution() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SubmapQuery_Response::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SubmapQuery_Response::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
inline double SubmapQuery_Response::resolution() const {
  return resolution_;
}
inline void SubmapQuery_Response::set_resolution(double value) {
  set_has_resolution();
  resolution_ = value;
}

// optional .cartographer.transform.proto.Rigid3d slice_pose = 9;
inline bool SubmapQuery_Response::has_slice_pose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SubmapQuery_Response::set_has_slice_pose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SubmapQuery_Response::clear_has_slice_pose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SubmapQuery_Response::clear_slice_pose() {
  if (slice_pose_ != NULL) slice_pose_->::cartographer::transform::proto::Rigid3d::Clear();
  clear_has_slice_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& SubmapQuery_Response::slice_pose() const {
  return slice_pose_ != NULL ? *slice_pose_ : *default_instance_->slice_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapQuery_Response::mutable_slice_pose() {
  set_has_slice_pose();
  if (slice_pose_ == NULL) slice_pose_ = new ::cartographer::transform::proto::Rigid3d;
  return slice_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapQuery_Response::release_slice_pose() {
  clear_has_slice_pose();
  ::cartographer::transform::proto::Rigid3d* temp = slice_pose_;
  slice_pose_ = NULL;
  return temp;
}
inline void SubmapQuery_Response::set_allocated_slice_pose(::cartographer::transform::proto::Rigid3d* slice_pose) {
  delete slice_pose_;
  slice_pose_ = slice_pose;
  if (slice_pose) {
    set_has_slice_pose();
  } else {
    clear_has_slice_pose();
  }
}

// optional string error_message = 8;
inline bool SubmapQuery_Response::has_error_message() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SubmapQuery_Response::set_has_error_message() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SubmapQuery_Response::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SubmapQuery_Response::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& SubmapQuery_Response::error_message() const {
  return *error_message_;
}
inline void SubmapQuery_Response::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void SubmapQuery_Response::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void SubmapQuery_Response::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmapQuery_Response::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* SubmapQuery_Response::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SubmapQuery_Response::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SubmapQuery

// optional .cartographer.mapping.proto.SubmapQuery.Request request = 1;
inline bool SubmapQuery::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubmapQuery::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubmapQuery::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubmapQuery::clear_request() {
  if (request_ != NULL) request_->::cartographer::mapping::proto::SubmapQuery_Request::Clear();
  clear_has_request();
}
inline const ::cartographer::mapping::proto::SubmapQuery_Request& SubmapQuery::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::cartographer::mapping::proto::SubmapQuery_Request* SubmapQuery::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::cartographer::mapping::proto::SubmapQuery_Request;
  return request_;
}
inline ::cartographer::mapping::proto::SubmapQuery_Request* SubmapQuery::release_request() {
  clear_has_request();
  ::cartographer::mapping::proto::SubmapQuery_Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline void SubmapQuery::set_allocated_request(::cartographer::mapping::proto::SubmapQuery_Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
}

// optional .cartographer.mapping.proto.SubmapQuery.Response response = 2;
inline bool SubmapQuery::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubmapQuery::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubmapQuery::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubmapQuery::clear_response() {
  if (response_ != NULL) response_->::cartographer::mapping::proto::SubmapQuery_Response::Clear();
  clear_has_response();
}
inline const ::cartographer::mapping::proto::SubmapQuery_Response& SubmapQuery::response() const {
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::cartographer::mapping::proto::SubmapQuery_Response* SubmapQuery::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::cartographer::mapping::proto::SubmapQuery_Response;
  return response_;
}
inline ::cartographer::mapping::proto::SubmapQuery_Response* SubmapQuery::release_response() {
  clear_has_response();
  ::cartographer::mapping::proto::SubmapQuery_Response* temp = response_;
  response_ = NULL;
  return temp;
}
inline void SubmapQuery::set_allocated_response(::cartographer::mapping::proto::SubmapQuery_Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto__INCLUDED
