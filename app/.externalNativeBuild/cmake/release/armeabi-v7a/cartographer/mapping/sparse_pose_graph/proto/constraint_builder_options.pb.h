// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/sparse_pose_graph/proto/constraint_builder_options.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h"
#include "cartographer/mapping_2d/scan_matching/proto/ceres_scan_matcher_options.pb.h"
#include "cartographer/mapping_2d/scan_matching/proto/fast_correlative_scan_matcher_options.pb.h"
#include "cartographer/mapping_3d/scan_matching/proto/ceres_scan_matcher_options.pb.h"
#include "cartographer/mapping_3d/scan_matching/proto/fast_correlative_scan_matcher_options.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace sparse_pose_graph {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto();

class ConstraintBuilderOptions;

// ===================================================================

class ConstraintBuilderOptions : public ::google::protobuf::Message {
 public:
  ConstraintBuilderOptions();
  virtual ~ConstraintBuilderOptions();

  ConstraintBuilderOptions(const ConstraintBuilderOptions& from);

  inline ConstraintBuilderOptions& operator=(const ConstraintBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstraintBuilderOptions& default_instance();

  void Swap(ConstraintBuilderOptions* other);

  // implements Message ----------------------------------------------

  ConstraintBuilderOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConstraintBuilderOptions& from);
  void MergeFrom(const ConstraintBuilderOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double sampling_ratio = 1;
  inline bool has_sampling_ratio() const;
  inline void clear_sampling_ratio();
  static const int kSamplingRatioFieldNumber = 1;
  inline double sampling_ratio() const;
  inline void set_sampling_ratio(double value);

  // optional double max_constraint_distance = 2;
  inline bool has_max_constraint_distance() const;
  inline void clear_max_constraint_distance();
  static const int kMaxConstraintDistanceFieldNumber = 2;
  inline double max_constraint_distance() const;
  inline void set_max_constraint_distance(double value);

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 3;
  inline bool has_adaptive_voxel_filter_options() const;
  inline void clear_adaptive_voxel_filter_options();
  static const int kAdaptiveVoxelFilterOptionsFieldNumber = 3;
  inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& adaptive_voxel_filter_options() const;
  inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* mutable_adaptive_voxel_filter_options();
  inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* release_adaptive_voxel_filter_options();
  inline void set_allocated_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options);

  // optional double min_score = 4;
  inline bool has_min_score() const;
  inline void clear_min_score();
  static const int kMinScoreFieldNumber = 4;
  inline double min_score() const;
  inline void set_min_score(double value);

  // optional double global_localization_min_score = 5;
  inline bool has_global_localization_min_score() const;
  inline void clear_global_localization_min_score();
  static const int kGlobalLocalizationMinScoreFieldNumber = 5;
  inline double global_localization_min_score() const;
  inline void set_global_localization_min_score(double value);

  // optional double loop_closure_translation_weight = 13;
  inline bool has_loop_closure_translation_weight() const;
  inline void clear_loop_closure_translation_weight();
  static const int kLoopClosureTranslationWeightFieldNumber = 13;
  inline double loop_closure_translation_weight() const;
  inline void set_loop_closure_translation_weight(double value);

  // optional double loop_closure_rotation_weight = 14;
  inline bool has_loop_closure_rotation_weight() const;
  inline void clear_loop_closure_rotation_weight();
  static const int kLoopClosureRotationWeightFieldNumber = 14;
  inline double loop_closure_rotation_weight() const;
  inline void set_loop_closure_rotation_weight(double value);

  // optional bool log_matches = 8;
  inline bool has_log_matches() const;
  inline void clear_log_matches();
  static const int kLogMatchesFieldNumber = 8;
  inline bool log_matches() const;
  inline void set_log_matches(bool value);

  // optional .cartographer.mapping_2d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options = 9;
  inline bool has_fast_correlative_scan_matcher_options() const;
  inline void clear_fast_correlative_scan_matcher_options();
  static const int kFastCorrelativeScanMatcherOptionsFieldNumber = 9;
  inline const ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions& fast_correlative_scan_matcher_options() const;
  inline ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* mutable_fast_correlative_scan_matcher_options();
  inline ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* release_fast_correlative_scan_matcher_options();
  inline void set_allocated_fast_correlative_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* fast_correlative_scan_matcher_options);

  // optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 11;
  inline bool has_ceres_scan_matcher_options() const;
  inline void clear_ceres_scan_matcher_options();
  static const int kCeresScanMatcherOptionsFieldNumber = 11;
  inline const ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions& ceres_scan_matcher_options() const;
  inline ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* mutable_ceres_scan_matcher_options();
  inline ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* release_ceres_scan_matcher_options();
  inline void set_allocated_ceres_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options);

  // optional .cartographer.mapping_3d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options_3d = 10;
  inline bool has_fast_correlative_scan_matcher_options_3d() const;
  inline void clear_fast_correlative_scan_matcher_options_3d();
  static const int kFastCorrelativeScanMatcherOptions3DFieldNumber = 10;
  inline const ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions& fast_correlative_scan_matcher_options_3d() const;
  inline ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* mutable_fast_correlative_scan_matcher_options_3d();
  inline ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* release_fast_correlative_scan_matcher_options_3d();
  inline void set_allocated_fast_correlative_scan_matcher_options_3d(::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* fast_correlative_scan_matcher_options_3d);

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 15;
  inline bool has_high_resolution_adaptive_voxel_filter_options() const;
  inline void clear_high_resolution_adaptive_voxel_filter_options();
  static const int kHighResolutionAdaptiveVoxelFilterOptionsFieldNumber = 15;
  inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& high_resolution_adaptive_voxel_filter_options() const;
  inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* mutable_high_resolution_adaptive_voxel_filter_options();
  inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* release_high_resolution_adaptive_voxel_filter_options();
  inline void set_allocated_high_resolution_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* high_resolution_adaptive_voxel_filter_options);

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 16;
  inline bool has_low_resolution_adaptive_voxel_filter_options() const;
  inline void clear_low_resolution_adaptive_voxel_filter_options();
  static const int kLowResolutionAdaptiveVoxelFilterOptionsFieldNumber = 16;
  inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& low_resolution_adaptive_voxel_filter_options() const;
  inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* mutable_low_resolution_adaptive_voxel_filter_options();
  inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* release_low_resolution_adaptive_voxel_filter_options();
  inline void set_allocated_low_resolution_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* low_resolution_adaptive_voxel_filter_options);

  // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options_3d = 12;
  inline bool has_ceres_scan_matcher_options_3d() const;
  inline void clear_ceres_scan_matcher_options_3d();
  static const int kCeresScanMatcherOptions3DFieldNumber = 12;
  inline const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions& ceres_scan_matcher_options_3d() const;
  inline ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* mutable_ceres_scan_matcher_options_3d();
  inline ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* release_ceres_scan_matcher_options_3d();
  inline void set_allocated_ceres_scan_matcher_options_3d(::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options_3d);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
 private:
  inline void set_has_sampling_ratio();
  inline void clear_has_sampling_ratio();
  inline void set_has_max_constraint_distance();
  inline void clear_has_max_constraint_distance();
  inline void set_has_adaptive_voxel_filter_options();
  inline void clear_has_adaptive_voxel_filter_options();
  inline void set_has_min_score();
  inline void clear_has_min_score();
  inline void set_has_global_localization_min_score();
  inline void clear_has_global_localization_min_score();
  inline void set_has_loop_closure_translation_weight();
  inline void clear_has_loop_closure_translation_weight();
  inline void set_has_loop_closure_rotation_weight();
  inline void clear_has_loop_closure_rotation_weight();
  inline void set_has_log_matches();
  inline void clear_has_log_matches();
  inline void set_has_fast_correlative_scan_matcher_options();
  inline void clear_has_fast_correlative_scan_matcher_options();
  inline void set_has_ceres_scan_matcher_options();
  inline void clear_has_ceres_scan_matcher_options();
  inline void set_has_fast_correlative_scan_matcher_options_3d();
  inline void clear_has_fast_correlative_scan_matcher_options_3d();
  inline void set_has_high_resolution_adaptive_voxel_filter_options();
  inline void clear_has_high_resolution_adaptive_voxel_filter_options();
  inline void set_has_low_resolution_adaptive_voxel_filter_options();
  inline void clear_has_low_resolution_adaptive_voxel_filter_options();
  inline void set_has_ceres_scan_matcher_options_3d();
  inline void clear_has_ceres_scan_matcher_options_3d();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double sampling_ratio_;
  double max_constraint_distance_;
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options_;
  double min_score_;
  double global_localization_min_score_;
  double loop_closure_translation_weight_;
  double loop_closure_rotation_weight_;
  ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* fast_correlative_scan_matcher_options_;
  ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options_;
  ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* fast_correlative_scan_matcher_options_3d_;
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* high_resolution_adaptive_voxel_filter_options_;
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* low_resolution_adaptive_voxel_filter_options_;
  ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options_3d_;
  bool log_matches_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static ConstraintBuilderOptions* default_instance_;
};
// ===================================================================


// ===================================================================

// ConstraintBuilderOptions

// optional double sampling_ratio = 1;
inline bool ConstraintBuilderOptions::has_sampling_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConstraintBuilderOptions::set_has_sampling_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConstraintBuilderOptions::clear_has_sampling_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConstraintBuilderOptions::clear_sampling_ratio() {
  sampling_ratio_ = 0;
  clear_has_sampling_ratio();
}
inline double ConstraintBuilderOptions::sampling_ratio() const {
  return sampling_ratio_;
}
inline void ConstraintBuilderOptions::set_sampling_ratio(double value) {
  set_has_sampling_ratio();
  sampling_ratio_ = value;
}

// optional double max_constraint_distance = 2;
inline bool ConstraintBuilderOptions::has_max_constraint_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConstraintBuilderOptions::set_has_max_constraint_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConstraintBuilderOptions::clear_has_max_constraint_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConstraintBuilderOptions::clear_max_constraint_distance() {
  max_constraint_distance_ = 0;
  clear_has_max_constraint_distance();
}
inline double ConstraintBuilderOptions::max_constraint_distance() const {
  return max_constraint_distance_;
}
inline void ConstraintBuilderOptions::set_max_constraint_distance(double value) {
  set_has_max_constraint_distance();
  max_constraint_distance_ = value;
}

// optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 3;
inline bool ConstraintBuilderOptions::has_adaptive_voxel_filter_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConstraintBuilderOptions::set_has_adaptive_voxel_filter_options() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConstraintBuilderOptions::clear_has_adaptive_voxel_filter_options() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConstraintBuilderOptions::clear_adaptive_voxel_filter_options() {
  if (adaptive_voxel_filter_options_ != NULL) adaptive_voxel_filter_options_->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::Clear();
  clear_has_adaptive_voxel_filter_options();
}
inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& ConstraintBuilderOptions::adaptive_voxel_filter_options() const {
  return adaptive_voxel_filter_options_ != NULL ? *adaptive_voxel_filter_options_ : *default_instance_->adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* ConstraintBuilderOptions::mutable_adaptive_voxel_filter_options() {
  set_has_adaptive_voxel_filter_options();
  if (adaptive_voxel_filter_options_ == NULL) adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  return adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* ConstraintBuilderOptions::release_adaptive_voxel_filter_options() {
  clear_has_adaptive_voxel_filter_options();
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = NULL;
  return temp;
}
inline void ConstraintBuilderOptions::set_allocated_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options) {
  delete adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = adaptive_voxel_filter_options;
  if (adaptive_voxel_filter_options) {
    set_has_adaptive_voxel_filter_options();
  } else {
    clear_has_adaptive_voxel_filter_options();
  }
}

// optional double min_score = 4;
inline bool ConstraintBuilderOptions::has_min_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConstraintBuilderOptions::set_has_min_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConstraintBuilderOptions::clear_has_min_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConstraintBuilderOptions::clear_min_score() {
  min_score_ = 0;
  clear_has_min_score();
}
inline double ConstraintBuilderOptions::min_score() const {
  return min_score_;
}
inline void ConstraintBuilderOptions::set_min_score(double value) {
  set_has_min_score();
  min_score_ = value;
}

// optional double global_localization_min_score = 5;
inline bool ConstraintBuilderOptions::has_global_localization_min_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConstraintBuilderOptions::set_has_global_localization_min_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConstraintBuilderOptions::clear_has_global_localization_min_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConstraintBuilderOptions::clear_global_localization_min_score() {
  global_localization_min_score_ = 0;
  clear_has_global_localization_min_score();
}
inline double ConstraintBuilderOptions::global_localization_min_score() const {
  return global_localization_min_score_;
}
inline void ConstraintBuilderOptions::set_global_localization_min_score(double value) {
  set_has_global_localization_min_score();
  global_localization_min_score_ = value;
}

// optional double loop_closure_translation_weight = 13;
inline bool ConstraintBuilderOptions::has_loop_closure_translation_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConstraintBuilderOptions::set_has_loop_closure_translation_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConstraintBuilderOptions::clear_has_loop_closure_translation_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConstraintBuilderOptions::clear_loop_closure_translation_weight() {
  loop_closure_translation_weight_ = 0;
  clear_has_loop_closure_translation_weight();
}
inline double ConstraintBuilderOptions::loop_closure_translation_weight() const {
  return loop_closure_translation_weight_;
}
inline void ConstraintBuilderOptions::set_loop_closure_translation_weight(double value) {
  set_has_loop_closure_translation_weight();
  loop_closure_translation_weight_ = value;
}

// optional double loop_closure_rotation_weight = 14;
inline bool ConstraintBuilderOptions::has_loop_closure_rotation_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConstraintBuilderOptions::set_has_loop_closure_rotation_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConstraintBuilderOptions::clear_has_loop_closure_rotation_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConstraintBuilderOptions::clear_loop_closure_rotation_weight() {
  loop_closure_rotation_weight_ = 0;
  clear_has_loop_closure_rotation_weight();
}
inline double ConstraintBuilderOptions::loop_closure_rotation_weight() const {
  return loop_closure_rotation_weight_;
}
inline void ConstraintBuilderOptions::set_loop_closure_rotation_weight(double value) {
  set_has_loop_closure_rotation_weight();
  loop_closure_rotation_weight_ = value;
}

// optional bool log_matches = 8;
inline bool ConstraintBuilderOptions::has_log_matches() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConstraintBuilderOptions::set_has_log_matches() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConstraintBuilderOptions::clear_has_log_matches() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConstraintBuilderOptions::clear_log_matches() {
  log_matches_ = false;
  clear_has_log_matches();
}
inline bool ConstraintBuilderOptions::log_matches() const {
  return log_matches_;
}
inline void ConstraintBuilderOptions::set_log_matches(bool value) {
  set_has_log_matches();
  log_matches_ = value;
}

// optional .cartographer.mapping_2d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options = 9;
inline bool ConstraintBuilderOptions::has_fast_correlative_scan_matcher_options() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConstraintBuilderOptions::set_has_fast_correlative_scan_matcher_options() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConstraintBuilderOptions::clear_has_fast_correlative_scan_matcher_options() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options() {
  if (fast_correlative_scan_matcher_options_ != NULL) fast_correlative_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions::Clear();
  clear_has_fast_correlative_scan_matcher_options();
}
inline const ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions& ConstraintBuilderOptions::fast_correlative_scan_matcher_options() const {
  return fast_correlative_scan_matcher_options_ != NULL ? *fast_correlative_scan_matcher_options_ : *default_instance_->fast_correlative_scan_matcher_options_;
}
inline ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* ConstraintBuilderOptions::mutable_fast_correlative_scan_matcher_options() {
  set_has_fast_correlative_scan_matcher_options();
  if (fast_correlative_scan_matcher_options_ == NULL) fast_correlative_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions;
  return fast_correlative_scan_matcher_options_;
}
inline ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* ConstraintBuilderOptions::release_fast_correlative_scan_matcher_options() {
  clear_has_fast_correlative_scan_matcher_options();
  ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* temp = fast_correlative_scan_matcher_options_;
  fast_correlative_scan_matcher_options_ = NULL;
  return temp;
}
inline void ConstraintBuilderOptions::set_allocated_fast_correlative_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* fast_correlative_scan_matcher_options) {
  delete fast_correlative_scan_matcher_options_;
  fast_correlative_scan_matcher_options_ = fast_correlative_scan_matcher_options;
  if (fast_correlative_scan_matcher_options) {
    set_has_fast_correlative_scan_matcher_options();
  } else {
    clear_has_fast_correlative_scan_matcher_options();
  }
}

// optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 11;
inline bool ConstraintBuilderOptions::has_ceres_scan_matcher_options() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConstraintBuilderOptions::set_has_ceres_scan_matcher_options() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConstraintBuilderOptions::clear_has_ceres_scan_matcher_options() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConstraintBuilderOptions::clear_ceres_scan_matcher_options() {
  if (ceres_scan_matcher_options_ != NULL) ceres_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions::Clear();
  clear_has_ceres_scan_matcher_options();
}
inline const ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions& ConstraintBuilderOptions::ceres_scan_matcher_options() const {
  return ceres_scan_matcher_options_ != NULL ? *ceres_scan_matcher_options_ : *default_instance_->ceres_scan_matcher_options_;
}
inline ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ConstraintBuilderOptions::mutable_ceres_scan_matcher_options() {
  set_has_ceres_scan_matcher_options();
  if (ceres_scan_matcher_options_ == NULL) ceres_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions;
  return ceres_scan_matcher_options_;
}
inline ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ConstraintBuilderOptions::release_ceres_scan_matcher_options() {
  clear_has_ceres_scan_matcher_options();
  ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* temp = ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
  return temp;
}
inline void ConstraintBuilderOptions::set_allocated_ceres_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options) {
  delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  if (ceres_scan_matcher_options) {
    set_has_ceres_scan_matcher_options();
  } else {
    clear_has_ceres_scan_matcher_options();
  }
}

// optional .cartographer.mapping_3d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options_3d = 10;
inline bool ConstraintBuilderOptions::has_fast_correlative_scan_matcher_options_3d() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConstraintBuilderOptions::set_has_fast_correlative_scan_matcher_options_3d() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConstraintBuilderOptions::clear_has_fast_correlative_scan_matcher_options_3d() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options_3d() {
  if (fast_correlative_scan_matcher_options_3d_ != NULL) fast_correlative_scan_matcher_options_3d_->::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions::Clear();
  clear_has_fast_correlative_scan_matcher_options_3d();
}
inline const ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions& ConstraintBuilderOptions::fast_correlative_scan_matcher_options_3d() const {
  return fast_correlative_scan_matcher_options_3d_ != NULL ? *fast_correlative_scan_matcher_options_3d_ : *default_instance_->fast_correlative_scan_matcher_options_3d_;
}
inline ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* ConstraintBuilderOptions::mutable_fast_correlative_scan_matcher_options_3d() {
  set_has_fast_correlative_scan_matcher_options_3d();
  if (fast_correlative_scan_matcher_options_3d_ == NULL) fast_correlative_scan_matcher_options_3d_ = new ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions;
  return fast_correlative_scan_matcher_options_3d_;
}
inline ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* ConstraintBuilderOptions::release_fast_correlative_scan_matcher_options_3d() {
  clear_has_fast_correlative_scan_matcher_options_3d();
  ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* temp = fast_correlative_scan_matcher_options_3d_;
  fast_correlative_scan_matcher_options_3d_ = NULL;
  return temp;
}
inline void ConstraintBuilderOptions::set_allocated_fast_correlative_scan_matcher_options_3d(::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* fast_correlative_scan_matcher_options_3d) {
  delete fast_correlative_scan_matcher_options_3d_;
  fast_correlative_scan_matcher_options_3d_ = fast_correlative_scan_matcher_options_3d;
  if (fast_correlative_scan_matcher_options_3d) {
    set_has_fast_correlative_scan_matcher_options_3d();
  } else {
    clear_has_fast_correlative_scan_matcher_options_3d();
  }
}

// optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 15;
inline bool ConstraintBuilderOptions::has_high_resolution_adaptive_voxel_filter_options() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConstraintBuilderOptions::set_has_high_resolution_adaptive_voxel_filter_options() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConstraintBuilderOptions::clear_has_high_resolution_adaptive_voxel_filter_options() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConstraintBuilderOptions::clear_high_resolution_adaptive_voxel_filter_options() {
  if (high_resolution_adaptive_voxel_filter_options_ != NULL) high_resolution_adaptive_voxel_filter_options_->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::Clear();
  clear_has_high_resolution_adaptive_voxel_filter_options();
}
inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& ConstraintBuilderOptions::high_resolution_adaptive_voxel_filter_options() const {
  return high_resolution_adaptive_voxel_filter_options_ != NULL ? *high_resolution_adaptive_voxel_filter_options_ : *default_instance_->high_resolution_adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* ConstraintBuilderOptions::mutable_high_resolution_adaptive_voxel_filter_options() {
  set_has_high_resolution_adaptive_voxel_filter_options();
  if (high_resolution_adaptive_voxel_filter_options_ == NULL) high_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  return high_resolution_adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* ConstraintBuilderOptions::release_high_resolution_adaptive_voxel_filter_options() {
  clear_has_high_resolution_adaptive_voxel_filter_options();
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = high_resolution_adaptive_voxel_filter_options_;
  high_resolution_adaptive_voxel_filter_options_ = NULL;
  return temp;
}
inline void ConstraintBuilderOptions::set_allocated_high_resolution_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* high_resolution_adaptive_voxel_filter_options) {
  delete high_resolution_adaptive_voxel_filter_options_;
  high_resolution_adaptive_voxel_filter_options_ = high_resolution_adaptive_voxel_filter_options;
  if (high_resolution_adaptive_voxel_filter_options) {
    set_has_high_resolution_adaptive_voxel_filter_options();
  } else {
    clear_has_high_resolution_adaptive_voxel_filter_options();
  }
}

// optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 16;
inline bool ConstraintBuilderOptions::has_low_resolution_adaptive_voxel_filter_options() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConstraintBuilderOptions::set_has_low_resolution_adaptive_voxel_filter_options() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConstraintBuilderOptions::clear_has_low_resolution_adaptive_voxel_filter_options() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConstraintBuilderOptions::clear_low_resolution_adaptive_voxel_filter_options() {
  if (low_resolution_adaptive_voxel_filter_options_ != NULL) low_resolution_adaptive_voxel_filter_options_->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::Clear();
  clear_has_low_resolution_adaptive_voxel_filter_options();
}
inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& ConstraintBuilderOptions::low_resolution_adaptive_voxel_filter_options() const {
  return low_resolution_adaptive_voxel_filter_options_ != NULL ? *low_resolution_adaptive_voxel_filter_options_ : *default_instance_->low_resolution_adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* ConstraintBuilderOptions::mutable_low_resolution_adaptive_voxel_filter_options() {
  set_has_low_resolution_adaptive_voxel_filter_options();
  if (low_resolution_adaptive_voxel_filter_options_ == NULL) low_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  return low_resolution_adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* ConstraintBuilderOptions::release_low_resolution_adaptive_voxel_filter_options() {
  clear_has_low_resolution_adaptive_voxel_filter_options();
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = low_resolution_adaptive_voxel_filter_options_;
  low_resolution_adaptive_voxel_filter_options_ = NULL;
  return temp;
}
inline void ConstraintBuilderOptions::set_allocated_low_resolution_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* low_resolution_adaptive_voxel_filter_options) {
  delete low_resolution_adaptive_voxel_filter_options_;
  low_resolution_adaptive_voxel_filter_options_ = low_resolution_adaptive_voxel_filter_options;
  if (low_resolution_adaptive_voxel_filter_options) {
    set_has_low_resolution_adaptive_voxel_filter_options();
  } else {
    clear_has_low_resolution_adaptive_voxel_filter_options();
  }
}

// optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options_3d = 12;
inline bool ConstraintBuilderOptions::has_ceres_scan_matcher_options_3d() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConstraintBuilderOptions::set_has_ceres_scan_matcher_options_3d() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConstraintBuilderOptions::clear_has_ceres_scan_matcher_options_3d() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConstraintBuilderOptions::clear_ceres_scan_matcher_options_3d() {
  if (ceres_scan_matcher_options_3d_ != NULL) ceres_scan_matcher_options_3d_->::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::Clear();
  clear_has_ceres_scan_matcher_options_3d();
}
inline const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions& ConstraintBuilderOptions::ceres_scan_matcher_options_3d() const {
  return ceres_scan_matcher_options_3d_ != NULL ? *ceres_scan_matcher_options_3d_ : *default_instance_->ceres_scan_matcher_options_3d_;
}
inline ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ConstraintBuilderOptions::mutable_ceres_scan_matcher_options_3d() {
  set_has_ceres_scan_matcher_options_3d();
  if (ceres_scan_matcher_options_3d_ == NULL) ceres_scan_matcher_options_3d_ = new ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions;
  return ceres_scan_matcher_options_3d_;
}
inline ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ConstraintBuilderOptions::release_ceres_scan_matcher_options_3d() {
  clear_has_ceres_scan_matcher_options_3d();
  ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* temp = ceres_scan_matcher_options_3d_;
  ceres_scan_matcher_options_3d_ = NULL;
  return temp;
}
inline void ConstraintBuilderOptions::set_allocated_ceres_scan_matcher_options_3d(::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options_3d) {
  delete ceres_scan_matcher_options_3d_;
  ceres_scan_matcher_options_3d_ = ceres_scan_matcher_options_3d;
  if (ceres_scan_matcher_options_3d) {
    set_has_ceres_scan_matcher_options_3d();
  } else {
    clear_has_ceres_scan_matcher_options_3d();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sparse_pose_graph
}  // namespace mapping
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto__INCLUDED
