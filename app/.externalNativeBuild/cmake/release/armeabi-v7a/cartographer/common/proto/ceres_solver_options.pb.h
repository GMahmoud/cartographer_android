// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/common/proto/ceres_solver_options.proto

#ifndef PROTOBUF_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace common {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();
void protobuf_AssignDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();
void protobuf_ShutdownFile_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();

class CeresSolverOptions;

// ===================================================================

class CeresSolverOptions : public ::google::protobuf::Message {
 public:
  CeresSolverOptions();
  virtual ~CeresSolverOptions();

  CeresSolverOptions(const CeresSolverOptions& from);

  inline CeresSolverOptions& operator=(const CeresSolverOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CeresSolverOptions& default_instance();

  void Swap(CeresSolverOptions* other);

  // implements Message ----------------------------------------------

  CeresSolverOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CeresSolverOptions& from);
  void MergeFrom(const CeresSolverOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_nonmonotonic_steps = 1;
  inline bool has_use_nonmonotonic_steps() const;
  inline void clear_use_nonmonotonic_steps();
  static const int kUseNonmonotonicStepsFieldNumber = 1;
  inline bool use_nonmonotonic_steps() const;
  inline void set_use_nonmonotonic_steps(bool value);

  // optional int32 max_num_iterations = 2;
  inline bool has_max_num_iterations() const;
  inline void clear_max_num_iterations();
  static const int kMaxNumIterationsFieldNumber = 2;
  inline ::google::protobuf::int32 max_num_iterations() const;
  inline void set_max_num_iterations(::google::protobuf::int32 value);

  // optional int32 num_threads = 3;
  inline bool has_num_threads() const;
  inline void clear_num_threads();
  static const int kNumThreadsFieldNumber = 3;
  inline ::google::protobuf::int32 num_threads() const;
  inline void set_num_threads(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.common.proto.CeresSolverOptions)
 private:
  inline void set_has_use_nonmonotonic_steps();
  inline void clear_has_use_nonmonotonic_steps();
  inline void set_has_max_num_iterations();
  inline void clear_has_max_num_iterations();
  inline void set_has_num_threads();
  inline void clear_has_num_threads();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool use_nonmonotonic_steps_;
  ::google::protobuf::int32 max_num_iterations_;
  ::google::protobuf::int32 num_threads_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();

  void InitAsDefaultInstance();
  static CeresSolverOptions* default_instance_;
};
// ===================================================================


// ===================================================================

// CeresSolverOptions

// optional bool use_nonmonotonic_steps = 1;
inline bool CeresSolverOptions::has_use_nonmonotonic_steps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CeresSolverOptions::set_has_use_nonmonotonic_steps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CeresSolverOptions::clear_has_use_nonmonotonic_steps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CeresSolverOptions::clear_use_nonmonotonic_steps() {
  use_nonmonotonic_steps_ = false;
  clear_has_use_nonmonotonic_steps();
}
inline bool CeresSolverOptions::use_nonmonotonic_steps() const {
  return use_nonmonotonic_steps_;
}
inline void CeresSolverOptions::set_use_nonmonotonic_steps(bool value) {
  set_has_use_nonmonotonic_steps();
  use_nonmonotonic_steps_ = value;
}

// optional int32 max_num_iterations = 2;
inline bool CeresSolverOptions::has_max_num_iterations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CeresSolverOptions::set_has_max_num_iterations() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CeresSolverOptions::clear_has_max_num_iterations() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CeresSolverOptions::clear_max_num_iterations() {
  max_num_iterations_ = 0;
  clear_has_max_num_iterations();
}
inline ::google::protobuf::int32 CeresSolverOptions::max_num_iterations() const {
  return max_num_iterations_;
}
inline void CeresSolverOptions::set_max_num_iterations(::google::protobuf::int32 value) {
  set_has_max_num_iterations();
  max_num_iterations_ = value;
}

// optional int32 num_threads = 3;
inline bool CeresSolverOptions::has_num_threads() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CeresSolverOptions::set_has_num_threads() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CeresSolverOptions::clear_has_num_threads() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CeresSolverOptions::clear_num_threads() {
  num_threads_ = 0;
  clear_has_num_threads();
}
inline ::google::protobuf::int32 CeresSolverOptions::num_threads() const {
  return num_threads_;
}
inline void CeresSolverOptions::set_num_threads(::google::protobuf::int32 value) {
  set_has_num_threads();
  num_threads_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace common
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto__INCLUDED
