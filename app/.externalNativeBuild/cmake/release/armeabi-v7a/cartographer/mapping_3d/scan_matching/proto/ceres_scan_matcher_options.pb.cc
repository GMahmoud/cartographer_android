// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_3d/scan_matching/proto/ceres_scan_matcher_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping_3d/scan_matching/proto/ceres_scan_matcher_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_3d {
namespace scan_matching {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* CeresScanMatcherOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CeresScanMatcherOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping_3d/scan_matching/proto/ceres_scan_matcher_options.proto");
  GOOGLE_CHECK(file != NULL);
  CeresScanMatcherOptions_descriptor_ = file->message_type(0);
  static const int CeresScanMatcherOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, occupied_space_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, rotation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, only_optimize_yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, ceres_solver_options_),
  };
  CeresScanMatcherOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CeresScanMatcherOptions_descriptor_,
      CeresScanMatcherOptions::default_instance_,
      CeresScanMatcherOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CeresScanMatcherOptions));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CeresScanMatcherOptions_descriptor_, &CeresScanMatcherOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto() {
  delete CeresScanMatcherOptions::default_instance_;
  delete CeresScanMatcherOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::common::proto::protobuf_AddDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nLcartographer/mapping_3d/scan_matching/"
    "proto/ceres_scan_matcher_options.proto\022+"
    "cartographer.mapping_3d.scan_matching.pr"
    "oto\0324cartographer/common/proto/ceres_sol"
    "ver_options.proto\"\325\001\n\027CeresScanMatcherOp"
    "tions\022\035\n\025occupied_space_weight\030\001 \003(\001\022\032\n\022"
    "translation_weight\030\002 \001(\001\022\027\n\017rotation_wei"
    "ght\030\003 \001(\001\022\031\n\021only_optimize_yaw\030\005 \001(\010\022K\n\024"
    "ceres_solver_options\030\006 \001(\0132-.cartographe"
    "r.common.proto.CeresSolverOptions", 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping_3d/scan_matching/proto/ceres_scan_matcher_options.proto", &protobuf_RegisterTypes);
  CeresScanMatcherOptions::default_instance_ = new CeresScanMatcherOptions();
  CeresScanMatcherOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CeresScanMatcherOptions::kOccupiedSpaceWeightFieldNumber;
const int CeresScanMatcherOptions::kTranslationWeightFieldNumber;
const int CeresScanMatcherOptions::kRotationWeightFieldNumber;
const int CeresScanMatcherOptions::kOnlyOptimizeYawFieldNumber;
const int CeresScanMatcherOptions::kCeresSolverOptionsFieldNumber;
#endif  // !_MSC_VER

CeresScanMatcherOptions::CeresScanMatcherOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CeresScanMatcherOptions::InitAsDefaultInstance() {
  ceres_solver_options_ = const_cast< ::cartographer::common::proto::CeresSolverOptions*>(&::cartographer::common::proto::CeresSolverOptions::default_instance());
}

CeresScanMatcherOptions::CeresScanMatcherOptions(const CeresScanMatcherOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CeresScanMatcherOptions::SharedCtor() {
  _cached_size_ = 0;
  translation_weight_ = 0;
  rotation_weight_ = 0;
  only_optimize_yaw_ = false;
  ceres_solver_options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CeresScanMatcherOptions::~CeresScanMatcherOptions() {
  SharedDtor();
}

void CeresScanMatcherOptions::SharedDtor() {
  if (this != default_instance_) {
    delete ceres_solver_options_;
  }
}

void CeresScanMatcherOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CeresScanMatcherOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CeresScanMatcherOptions_descriptor_;
}

const CeresScanMatcherOptions& CeresScanMatcherOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto();
  return *default_instance_;
}

CeresScanMatcherOptions* CeresScanMatcherOptions::default_instance_ = NULL;

CeresScanMatcherOptions* CeresScanMatcherOptions::New() const {
  return new CeresScanMatcherOptions;
}

void CeresScanMatcherOptions::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    translation_weight_ = 0;
    rotation_weight_ = 0;
    only_optimize_yaw_ = false;
    if (has_ceres_solver_options()) {
      if (ceres_solver_options_ != NULL) ceres_solver_options_->::cartographer::common::proto::CeresSolverOptions::Clear();
    }
  }
  occupied_space_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CeresScanMatcherOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double occupied_space_weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_occupied_space_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_occupied_space_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_occupied_space_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_occupied_space_weight;
        if (input->ExpectTag(17)) goto parse_translation_weight;
        break;
      }

      // optional double translation_weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_weight_)));
          set_has_translation_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_rotation_weight;
        break;
      }

      // optional double rotation_weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));
          set_has_rotation_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_only_optimize_yaw;
        break;
      }

      // optional bool only_optimize_yaw = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_optimize_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_optimize_yaw_)));
          set_has_only_optimize_yaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ceres_solver_options;
        break;
      }

      // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ceres_solver_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_solver_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CeresScanMatcherOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double occupied_space_weight = 1;
  for (int i = 0; i < this->occupied_space_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->occupied_space_weight(i), output);
  }

  // optional double translation_weight = 2;
  if (has_translation_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->translation_weight(), output);
  }

  // optional double rotation_weight = 3;
  if (has_rotation_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rotation_weight(), output);
  }

  // optional bool only_optimize_yaw = 5;
  if (has_only_optimize_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->only_optimize_yaw(), output);
  }

  // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (has_ceres_solver_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ceres_solver_options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CeresScanMatcherOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double occupied_space_weight = 1;
  for (int i = 0; i < this->occupied_space_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->occupied_space_weight(i), target);
  }

  // optional double translation_weight = 2;
  if (has_translation_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->translation_weight(), target);
  }

  // optional double rotation_weight = 3;
  if (has_rotation_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rotation_weight(), target);
  }

  // optional bool only_optimize_yaw = 5;
  if (has_only_optimize_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->only_optimize_yaw(), target);
  }

  // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (has_ceres_solver_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ceres_solver_options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CeresScanMatcherOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional double translation_weight = 2;
    if (has_translation_weight()) {
      total_size += 1 + 8;
    }

    // optional double rotation_weight = 3;
    if (has_rotation_weight()) {
      total_size += 1 + 8;
    }

    // optional bool only_optimize_yaw = 5;
    if (has_only_optimize_yaw()) {
      total_size += 1 + 1;
    }

    // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
    if (has_ceres_solver_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ceres_solver_options());
    }

  }
  // repeated double occupied_space_weight = 1;
  {
    int data_size = 0;
    data_size = 8 * this->occupied_space_weight_size();
    total_size += 1 * this->occupied_space_weight_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CeresScanMatcherOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CeresScanMatcherOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CeresScanMatcherOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CeresScanMatcherOptions::MergeFrom(const CeresScanMatcherOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  occupied_space_weight_.MergeFrom(from.occupied_space_weight_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_translation_weight()) {
      set_translation_weight(from.translation_weight());
    }
    if (from.has_rotation_weight()) {
      set_rotation_weight(from.rotation_weight());
    }
    if (from.has_only_optimize_yaw()) {
      set_only_optimize_yaw(from.only_optimize_yaw());
    }
    if (from.has_ceres_solver_options()) {
      mutable_ceres_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(from.ceres_solver_options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CeresScanMatcherOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CeresScanMatcherOptions::CopyFrom(const CeresScanMatcherOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CeresScanMatcherOptions::IsInitialized() const {

  return true;
}

void CeresScanMatcherOptions::Swap(CeresScanMatcherOptions* other) {
  if (other != this) {
    occupied_space_weight_.Swap(&other->occupied_space_weight_);
    std::swap(translation_weight_, other->translation_weight_);
    std::swap(rotation_weight_, other->rotation_weight_);
    std::swap(only_optimize_yaw_, other->only_optimize_yaw_);
    std::swap(ceres_solver_options_, other->ceres_solver_options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CeresScanMatcherOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CeresScanMatcherOptions_descriptor_;
  metadata.reflection = CeresScanMatcherOptions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping_3d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
