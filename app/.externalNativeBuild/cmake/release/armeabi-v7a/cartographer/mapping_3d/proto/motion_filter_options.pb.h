// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_3d/proto/motion_filter_options.proto

#ifndef PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_3d {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto();

class MotionFilterOptions;

// ===================================================================

class MotionFilterOptions : public ::google::protobuf::Message {
 public:
  MotionFilterOptions();
  virtual ~MotionFilterOptions();

  MotionFilterOptions(const MotionFilterOptions& from);

  inline MotionFilterOptions& operator=(const MotionFilterOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotionFilterOptions& default_instance();

  void Swap(MotionFilterOptions* other);

  // implements Message ----------------------------------------------

  MotionFilterOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotionFilterOptions& from);
  void MergeFrom(const MotionFilterOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double max_time_seconds = 1;
  inline bool has_max_time_seconds() const;
  inline void clear_max_time_seconds();
  static const int kMaxTimeSecondsFieldNumber = 1;
  inline double max_time_seconds() const;
  inline void set_max_time_seconds(double value);

  // optional double max_distance_meters = 2;
  inline bool has_max_distance_meters() const;
  inline void clear_max_distance_meters();
  static const int kMaxDistanceMetersFieldNumber = 2;
  inline double max_distance_meters() const;
  inline void set_max_distance_meters(double value);

  // optional double max_angle_radians = 3;
  inline bool has_max_angle_radians() const;
  inline void clear_max_angle_radians();
  static const int kMaxAngleRadiansFieldNumber = 3;
  inline double max_angle_radians() const;
  inline void set_max_angle_radians(double value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping_3d.proto.MotionFilterOptions)
 private:
  inline void set_has_max_time_seconds();
  inline void clear_has_max_time_seconds();
  inline void set_has_max_distance_meters();
  inline void clear_has_max_distance_meters();
  inline void set_has_max_angle_radians();
  inline void clear_has_max_angle_radians();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double max_time_seconds_;
  double max_distance_meters_;
  double max_angle_radians_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto();

  void InitAsDefaultInstance();
  static MotionFilterOptions* default_instance_;
};
// ===================================================================


// ===================================================================

// MotionFilterOptions

// optional double max_time_seconds = 1;
inline bool MotionFilterOptions::has_max_time_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionFilterOptions::set_has_max_time_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotionFilterOptions::clear_has_max_time_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotionFilterOptions::clear_max_time_seconds() {
  max_time_seconds_ = 0;
  clear_has_max_time_seconds();
}
inline double MotionFilterOptions::max_time_seconds() const {
  return max_time_seconds_;
}
inline void MotionFilterOptions::set_max_time_seconds(double value) {
  set_has_max_time_seconds();
  max_time_seconds_ = value;
}

// optional double max_distance_meters = 2;
inline bool MotionFilterOptions::has_max_distance_meters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionFilterOptions::set_has_max_distance_meters() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotionFilterOptions::clear_has_max_distance_meters() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotionFilterOptions::clear_max_distance_meters() {
  max_distance_meters_ = 0;
  clear_has_max_distance_meters();
}
inline double MotionFilterOptions::max_distance_meters() const {
  return max_distance_meters_;
}
inline void MotionFilterOptions::set_max_distance_meters(double value) {
  set_has_max_distance_meters();
  max_distance_meters_ = value;
}

// optional double max_angle_radians = 3;
inline bool MotionFilterOptions::has_max_angle_radians() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionFilterOptions::set_has_max_angle_radians() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MotionFilterOptions::clear_has_max_angle_radians() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MotionFilterOptions::clear_max_angle_radians() {
  max_angle_radians_ = 0;
  clear_has_max_angle_radians();
}
inline double MotionFilterOptions::max_angle_radians() const {
  return max_angle_radians_;
}
inline void MotionFilterOptions::set_max_angle_radians(double value) {
  set_has_max_angle_radians();
  max_angle_radians_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_3d
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto__INCLUDED
