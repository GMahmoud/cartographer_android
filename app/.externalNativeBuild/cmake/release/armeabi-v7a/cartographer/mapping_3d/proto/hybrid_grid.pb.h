// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_3d/proto/hybrid_grid.proto

#ifndef PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fhybrid_5fgrid_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fhybrid_5fgrid_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_3d {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2fhybrid_5fgrid_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2fhybrid_5fgrid_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2fhybrid_5fgrid_2eproto();

class HybridGrid;

// ===================================================================

class HybridGrid : public ::google::protobuf::Message {
 public:
  HybridGrid();
  virtual ~HybridGrid();

  HybridGrid(const HybridGrid& from);

  inline HybridGrid& operator=(const HybridGrid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HybridGrid& default_instance();

  void Swap(HybridGrid* other);

  // implements Message ----------------------------------------------

  HybridGrid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HybridGrid& from);
  void MergeFrom(const HybridGrid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float resolution = 1;
  inline bool has_resolution() const;
  inline void clear_resolution();
  static const int kResolutionFieldNumber = 1;
  inline float resolution() const;
  inline void set_resolution(float value);

  // repeated sint32 x_indices = 3 [packed = true];
  inline int x_indices_size() const;
  inline void clear_x_indices();
  static const int kXIndicesFieldNumber = 3;
  inline ::google::protobuf::int32 x_indices(int index) const;
  inline void set_x_indices(int index, ::google::protobuf::int32 value);
  inline void add_x_indices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      x_indices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_x_indices();

  // repeated sint32 y_indices = 4 [packed = true];
  inline int y_indices_size() const;
  inline void clear_y_indices();
  static const int kYIndicesFieldNumber = 4;
  inline ::google::protobuf::int32 y_indices(int index) const;
  inline void set_y_indices(int index, ::google::protobuf::int32 value);
  inline void add_y_indices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      y_indices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_y_indices();

  // repeated sint32 z_indices = 5 [packed = true];
  inline int z_indices_size() const;
  inline void clear_z_indices();
  static const int kZIndicesFieldNumber = 5;
  inline ::google::protobuf::int32 z_indices(int index) const;
  inline void set_z_indices(int index, ::google::protobuf::int32 value);
  inline void add_z_indices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      z_indices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_z_indices();

  // repeated int32 values = 6 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 6;
  inline ::google::protobuf::int32 values(int index) const;
  inline void set_values(int index, ::google::protobuf::int32 value);
  inline void add_values(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:cartographer.mapping_3d.proto.HybridGrid)
 private:
  inline void set_has_resolution();
  inline void clear_has_resolution();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > x_indices_;
  mutable int _x_indices_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > y_indices_;
  mutable int _y_indices_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > z_indices_;
  mutable int _z_indices_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > values_;
  mutable int _values_cached_byte_size_;
  float resolution_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_5f3d_2fproto_2fhybrid_5fgrid_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_5f3d_2fproto_2fhybrid_5fgrid_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_5f3d_2fproto_2fhybrid_5fgrid_2eproto();

  void InitAsDefaultInstance();
  static HybridGrid* default_instance_;
};
// ===================================================================


// ===================================================================

// HybridGrid

// optional float resolution = 1;
inline bool HybridGrid::has_resolution() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HybridGrid::set_has_resolution() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HybridGrid::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HybridGrid::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
inline float HybridGrid::resolution() const {
  return resolution_;
}
inline void HybridGrid::set_resolution(float value) {
  set_has_resolution();
  resolution_ = value;
}

// repeated sint32 x_indices = 3 [packed = true];
inline int HybridGrid::x_indices_size() const {
  return x_indices_.size();
}
inline void HybridGrid::clear_x_indices() {
  x_indices_.Clear();
}
inline ::google::protobuf::int32 HybridGrid::x_indices(int index) const {
  return x_indices_.Get(index);
}
inline void HybridGrid::set_x_indices(int index, ::google::protobuf::int32 value) {
  x_indices_.Set(index, value);
}
inline void HybridGrid::add_x_indices(::google::protobuf::int32 value) {
  x_indices_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HybridGrid::x_indices() const {
  return x_indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HybridGrid::mutable_x_indices() {
  return &x_indices_;
}

// repeated sint32 y_indices = 4 [packed = true];
inline int HybridGrid::y_indices_size() const {
  return y_indices_.size();
}
inline void HybridGrid::clear_y_indices() {
  y_indices_.Clear();
}
inline ::google::protobuf::int32 HybridGrid::y_indices(int index) const {
  return y_indices_.Get(index);
}
inline void HybridGrid::set_y_indices(int index, ::google::protobuf::int32 value) {
  y_indices_.Set(index, value);
}
inline void HybridGrid::add_y_indices(::google::protobuf::int32 value) {
  y_indices_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HybridGrid::y_indices() const {
  return y_indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HybridGrid::mutable_y_indices() {
  return &y_indices_;
}

// repeated sint32 z_indices = 5 [packed = true];
inline int HybridGrid::z_indices_size() const {
  return z_indices_.size();
}
inline void HybridGrid::clear_z_indices() {
  z_indices_.Clear();
}
inline ::google::protobuf::int32 HybridGrid::z_indices(int index) const {
  return z_indices_.Get(index);
}
inline void HybridGrid::set_z_indices(int index, ::google::protobuf::int32 value) {
  z_indices_.Set(index, value);
}
inline void HybridGrid::add_z_indices(::google::protobuf::int32 value) {
  z_indices_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HybridGrid::z_indices() const {
  return z_indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HybridGrid::mutable_z_indices() {
  return &z_indices_;
}

// repeated int32 values = 6 [packed = true];
inline int HybridGrid::values_size() const {
  return values_.size();
}
inline void HybridGrid::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int32 HybridGrid::values(int index) const {
  return values_.Get(index);
}
inline void HybridGrid::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
}
inline void HybridGrid::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HybridGrid::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HybridGrid::mutable_values() {
  return &values_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_3d
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fhybrid_5fgrid_2eproto__INCLUDED
