// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_2d/proto/map_limits.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping_2d/proto/map_limits.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_2d {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* MapLimits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapLimits_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping_2d/proto/map_limits.proto");
  GOOGLE_CHECK(file != NULL);
  MapLimits_descriptor_ = file->message_type(0);
  static const int MapLimits_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLimits, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLimits, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLimits, cell_limits_),
  };
  MapLimits_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapLimits_descriptor_,
      MapLimits::default_instance_,
      MapLimits_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLimits, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLimits, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapLimits));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapLimits_descriptor_, &MapLimits::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto() {
  delete MapLimits::default_instance_;
  delete MapLimits_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping_2d::proto::protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2fcell_5flimits_2eproto();
  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.cartographer/mapping_2d/proto/map_limi"
    "ts.proto\022\035cartographer.mapping_2d.proto\032"
    "/cartographer/mapping_2d/proto/cell_limi"
    "ts.proto\032,cartographer/transform/proto/t"
    "ransform.proto\"\224\001\n\tMapLimits\022\022\n\nresoluti"
    "on\030\001 \001(\001\0223\n\003max\030\002 \001(\0132&.cartographer.tra"
    "nsform.proto.Vector2d\022>\n\013cell_limits\030\003 \001"
    "(\0132).cartographer.mapping_2d.proto.CellL"
    "imits", 325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping_2d/proto/map_limits.proto", &protobuf_RegisterTypes);
  MapLimits::default_instance_ = new MapLimits();
  MapLimits::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MapLimits::kResolutionFieldNumber;
const int MapLimits::kMaxFieldNumber;
const int MapLimits::kCellLimitsFieldNumber;
#endif  // !_MSC_VER

MapLimits::MapLimits()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapLimits::InitAsDefaultInstance() {
  max_ = const_cast< ::cartographer::transform::proto::Vector2d*>(&::cartographer::transform::proto::Vector2d::default_instance());
  cell_limits_ = const_cast< ::cartographer::mapping_2d::proto::CellLimits*>(&::cartographer::mapping_2d::proto::CellLimits::default_instance());
}

MapLimits::MapLimits(const MapLimits& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapLimits::SharedCtor() {
  _cached_size_ = 0;
  resolution_ = 0;
  max_ = NULL;
  cell_limits_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapLimits::~MapLimits() {
  SharedDtor();
}

void MapLimits::SharedDtor() {
  if (this != default_instance_) {
    delete max_;
    delete cell_limits_;
  }
}

void MapLimits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapLimits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapLimits_descriptor_;
}

const MapLimits& MapLimits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto();
  return *default_instance_;
}

MapLimits* MapLimits::default_instance_ = NULL;

MapLimits* MapLimits::New() const {
  return new MapLimits;
}

void MapLimits::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resolution_ = 0;
    if (has_max()) {
      if (max_ != NULL) max_->::cartographer::transform::proto::Vector2d::Clear();
    }
    if (has_cell_limits()) {
      if (cell_limits_ != NULL) cell_limits_->::cartographer::mapping_2d::proto::CellLimits::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapLimits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double resolution = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
          set_has_resolution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_max;
        break;
      }

      // optional .cartographer.transform.proto.Vector2d max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell_limits;
        break;
      }

      // optional .cartographer.mapping_2d.proto.CellLimits cell_limits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_limits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_limits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapLimits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double resolution = 1;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->resolution(), output);
  }

  // optional .cartographer.transform.proto.Vector2d max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->max(), output);
  }

  // optional .cartographer.mapping_2d.proto.CellLimits cell_limits = 3;
  if (has_cell_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell_limits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapLimits::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double resolution = 1;
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->resolution(), target);
  }

  // optional .cartographer.transform.proto.Vector2d max = 2;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->max(), target);
  }

  // optional .cartographer.mapping_2d.proto.CellLimits cell_limits = 3;
  if (has_cell_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cell_limits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapLimits::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double resolution = 1;
    if (has_resolution()) {
      total_size += 1 + 8;
    }

    // optional .cartographer.transform.proto.Vector2d max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max());
    }

    // optional .cartographer.mapping_2d.proto.CellLimits cell_limits = 3;
    if (has_cell_limits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_limits());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapLimits::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapLimits* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapLimits*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapLimits::MergeFrom(const MapLimits& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
    if (from.has_max()) {
      mutable_max()->::cartographer::transform::proto::Vector2d::MergeFrom(from.max());
    }
    if (from.has_cell_limits()) {
      mutable_cell_limits()->::cartographer::mapping_2d::proto::CellLimits::MergeFrom(from.cell_limits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapLimits::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLimits::CopyFrom(const MapLimits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLimits::IsInitialized() const {

  return true;
}

void MapLimits::Swap(MapLimits* other) {
  if (other != this) {
    std::swap(resolution_, other->resolution_);
    std::swap(max_, other->max_);
    std::swap(cell_limits_, other->cell_limits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapLimits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapLimits_descriptor_;
  metadata.reflection = MapLimits_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_2d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
