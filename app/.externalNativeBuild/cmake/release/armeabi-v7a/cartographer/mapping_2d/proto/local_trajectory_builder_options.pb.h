// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_2d/proto/local_trajectory_builder_options.proto

#ifndef PROTOBUF_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping_3d/proto/motion_filter_options.pb.h"
#include "cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h"
#include "cartographer/mapping_2d/proto/submaps_options.pb.h"
#include "cartographer/mapping_2d/scan_matching/proto/ceres_scan_matcher_options.pb.h"
#include "cartographer/mapping_2d/scan_matching/proto/real_time_correlative_scan_matcher_options.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_2d {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();

class LocalTrajectoryBuilderOptions;

// ===================================================================

class LocalTrajectoryBuilderOptions : public ::google::protobuf::Message {
 public:
  LocalTrajectoryBuilderOptions();
  virtual ~LocalTrajectoryBuilderOptions();

  LocalTrajectoryBuilderOptions(const LocalTrajectoryBuilderOptions& from);

  inline LocalTrajectoryBuilderOptions& operator=(const LocalTrajectoryBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalTrajectoryBuilderOptions& default_instance();

  void Swap(LocalTrajectoryBuilderOptions* other);

  // implements Message ----------------------------------------------

  LocalTrajectoryBuilderOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocalTrajectoryBuilderOptions& from);
  void MergeFrom(const LocalTrajectoryBuilderOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_range = 14;
  inline bool has_min_range() const;
  inline void clear_min_range();
  static const int kMinRangeFieldNumber = 14;
  inline float min_range() const;
  inline void set_min_range(float value);

  // optional float max_range = 15;
  inline bool has_max_range() const;
  inline void clear_max_range();
  static const int kMaxRangeFieldNumber = 15;
  inline float max_range() const;
  inline void set_max_range(float value);

  // optional float min_z = 1;
  inline bool has_min_z() const;
  inline void clear_min_z();
  static const int kMinZFieldNumber = 1;
  inline float min_z() const;
  inline void set_min_z(float value);

  // optional float max_z = 2;
  inline bool has_max_z() const;
  inline void clear_max_z();
  static const int kMaxZFieldNumber = 2;
  inline float max_z() const;
  inline void set_max_z(float value);

  // optional float missing_data_ray_length = 16;
  inline bool has_missing_data_ray_length() const;
  inline void clear_missing_data_ray_length();
  static const int kMissingDataRayLengthFieldNumber = 16;
  inline float missing_data_ray_length() const;
  inline void set_missing_data_ray_length(float value);

  // optional float voxel_filter_size = 3;
  inline bool has_voxel_filter_size() const;
  inline void clear_voxel_filter_size();
  static const int kVoxelFilterSizeFieldNumber = 3;
  inline float voxel_filter_size() const;
  inline void set_voxel_filter_size(float value);

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  inline bool has_adaptive_voxel_filter_options() const;
  inline void clear_adaptive_voxel_filter_options();
  static const int kAdaptiveVoxelFilterOptionsFieldNumber = 6;
  inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& adaptive_voxel_filter_options() const;
  inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* mutable_adaptive_voxel_filter_options();
  inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* release_adaptive_voxel_filter_options();
  inline void set_allocated_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options);

  // optional bool use_online_correlative_scan_matching = 5;
  inline bool has_use_online_correlative_scan_matching() const;
  inline void clear_use_online_correlative_scan_matching();
  static const int kUseOnlineCorrelativeScanMatchingFieldNumber = 5;
  inline bool use_online_correlative_scan_matching() const;
  inline void set_use_online_correlative_scan_matching(bool value);

  // optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  inline bool has_real_time_correlative_scan_matcher_options() const;
  inline void clear_real_time_correlative_scan_matcher_options();
  static const int kRealTimeCorrelativeScanMatcherOptionsFieldNumber = 7;
  inline const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& real_time_correlative_scan_matcher_options() const;
  inline ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* mutable_real_time_correlative_scan_matcher_options();
  inline ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* release_real_time_correlative_scan_matcher_options();
  inline void set_allocated_real_time_correlative_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options);

  // optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 8;
  inline bool has_ceres_scan_matcher_options() const;
  inline void clear_ceres_scan_matcher_options();
  static const int kCeresScanMatcherOptionsFieldNumber = 8;
  inline const ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions& ceres_scan_matcher_options() const;
  inline ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* mutable_ceres_scan_matcher_options();
  inline ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* release_ceres_scan_matcher_options();
  inline void set_allocated_ceres_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options);

  // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 13;
  inline bool has_motion_filter_options() const;
  inline void clear_motion_filter_options();
  static const int kMotionFilterOptionsFieldNumber = 13;
  inline const ::cartographer::mapping_3d::proto::MotionFilterOptions& motion_filter_options() const;
  inline ::cartographer::mapping_3d::proto::MotionFilterOptions* mutable_motion_filter_options();
  inline ::cartographer::mapping_3d::proto::MotionFilterOptions* release_motion_filter_options();
  inline void set_allocated_motion_filter_options(::cartographer::mapping_3d::proto::MotionFilterOptions* motion_filter_options);

  // optional double imu_gravity_time_constant = 17;
  inline bool has_imu_gravity_time_constant() const;
  inline void clear_imu_gravity_time_constant();
  static const int kImuGravityTimeConstantFieldNumber = 17;
  inline double imu_gravity_time_constant() const;
  inline void set_imu_gravity_time_constant(double value);

  // optional int32 num_odometry_states = 18;
  inline bool has_num_odometry_states() const;
  inline void clear_num_odometry_states();
  static const int kNumOdometryStatesFieldNumber = 18;
  inline ::google::protobuf::int32 num_odometry_states() const;
  inline void set_num_odometry_states(::google::protobuf::int32 value);

  // optional .cartographer.mapping_2d.proto.SubmapsOptions submaps_options = 11;
  inline bool has_submaps_options() const;
  inline void clear_submaps_options();
  static const int kSubmapsOptionsFieldNumber = 11;
  inline const ::cartographer::mapping_2d::proto::SubmapsOptions& submaps_options() const;
  inline ::cartographer::mapping_2d::proto::SubmapsOptions* mutable_submaps_options();
  inline ::cartographer::mapping_2d::proto::SubmapsOptions* release_submaps_options();
  inline void set_allocated_submaps_options(::cartographer::mapping_2d::proto::SubmapsOptions* submaps_options);

  // optional bool use_imu_data = 12;
  inline bool has_use_imu_data() const;
  inline void clear_use_imu_data();
  static const int kUseImuDataFieldNumber = 12;
  inline bool use_imu_data() const;
  inline void set_use_imu_data(bool value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
 private:
  inline void set_has_min_range();
  inline void clear_has_min_range();
  inline void set_has_max_range();
  inline void clear_has_max_range();
  inline void set_has_min_z();
  inline void clear_has_min_z();
  inline void set_has_max_z();
  inline void clear_has_max_z();
  inline void set_has_missing_data_ray_length();
  inline void clear_has_missing_data_ray_length();
  inline void set_has_voxel_filter_size();
  inline void clear_has_voxel_filter_size();
  inline void set_has_adaptive_voxel_filter_options();
  inline void clear_has_adaptive_voxel_filter_options();
  inline void set_has_use_online_correlative_scan_matching();
  inline void clear_has_use_online_correlative_scan_matching();
  inline void set_has_real_time_correlative_scan_matcher_options();
  inline void clear_has_real_time_correlative_scan_matcher_options();
  inline void set_has_ceres_scan_matcher_options();
  inline void clear_has_ceres_scan_matcher_options();
  inline void set_has_motion_filter_options();
  inline void clear_has_motion_filter_options();
  inline void set_has_imu_gravity_time_constant();
  inline void clear_has_imu_gravity_time_constant();
  inline void set_has_num_odometry_states();
  inline void clear_has_num_odometry_states();
  inline void set_has_submaps_options();
  inline void clear_has_submaps_options();
  inline void set_has_use_imu_data();
  inline void clear_has_use_imu_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float min_range_;
  float max_range_;
  float min_z_;
  float max_z_;
  float missing_data_ray_length_;
  float voxel_filter_size_;
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options_;
  ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options_;
  ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options_;
  ::cartographer::mapping_3d::proto::MotionFilterOptions* motion_filter_options_;
  double imu_gravity_time_constant_;
  bool use_online_correlative_scan_matching_;
  bool use_imu_data_;
  ::google::protobuf::int32 num_odometry_states_;
  ::cartographer::mapping_2d::proto::SubmapsOptions* submaps_options_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static LocalTrajectoryBuilderOptions* default_instance_;
};
// ===================================================================


// ===================================================================

// LocalTrajectoryBuilderOptions

// optional float min_range = 14;
inline bool LocalTrajectoryBuilderOptions::has_min_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_min_range() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_min_range() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocalTrajectoryBuilderOptions::clear_min_range() {
  min_range_ = 0;
  clear_has_min_range();
}
inline float LocalTrajectoryBuilderOptions::min_range() const {
  return min_range_;
}
inline void LocalTrajectoryBuilderOptions::set_min_range(float value) {
  set_has_min_range();
  min_range_ = value;
}

// optional float max_range = 15;
inline bool LocalTrajectoryBuilderOptions::has_max_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_max_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_max_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocalTrajectoryBuilderOptions::clear_max_range() {
  max_range_ = 0;
  clear_has_max_range();
}
inline float LocalTrajectoryBuilderOptions::max_range() const {
  return max_range_;
}
inline void LocalTrajectoryBuilderOptions::set_max_range(float value) {
  set_has_max_range();
  max_range_ = value;
}

// optional float min_z = 1;
inline bool LocalTrajectoryBuilderOptions::has_min_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_min_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_min_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocalTrajectoryBuilderOptions::clear_min_z() {
  min_z_ = 0;
  clear_has_min_z();
}
inline float LocalTrajectoryBuilderOptions::min_z() const {
  return min_z_;
}
inline void LocalTrajectoryBuilderOptions::set_min_z(float value) {
  set_has_min_z();
  min_z_ = value;
}

// optional float max_z = 2;
inline bool LocalTrajectoryBuilderOptions::has_max_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_max_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_max_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LocalTrajectoryBuilderOptions::clear_max_z() {
  max_z_ = 0;
  clear_has_max_z();
}
inline float LocalTrajectoryBuilderOptions::max_z() const {
  return max_z_;
}
inline void LocalTrajectoryBuilderOptions::set_max_z(float value) {
  set_has_max_z();
  max_z_ = value;
}

// optional float missing_data_ray_length = 16;
inline bool LocalTrajectoryBuilderOptions::has_missing_data_ray_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_missing_data_ray_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_missing_data_ray_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LocalTrajectoryBuilderOptions::clear_missing_data_ray_length() {
  missing_data_ray_length_ = 0;
  clear_has_missing_data_ray_length();
}
inline float LocalTrajectoryBuilderOptions::missing_data_ray_length() const {
  return missing_data_ray_length_;
}
inline void LocalTrajectoryBuilderOptions::set_missing_data_ray_length(float value) {
  set_has_missing_data_ray_length();
  missing_data_ray_length_ = value;
}

// optional float voxel_filter_size = 3;
inline bool LocalTrajectoryBuilderOptions::has_voxel_filter_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_voxel_filter_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_voxel_filter_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LocalTrajectoryBuilderOptions::clear_voxel_filter_size() {
  voxel_filter_size_ = 0;
  clear_has_voxel_filter_size();
}
inline float LocalTrajectoryBuilderOptions::voxel_filter_size() const {
  return voxel_filter_size_;
}
inline void LocalTrajectoryBuilderOptions::set_voxel_filter_size(float value) {
  set_has_voxel_filter_size();
  voxel_filter_size_ = value;
}

// optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
inline bool LocalTrajectoryBuilderOptions::has_adaptive_voxel_filter_options() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_adaptive_voxel_filter_options() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_adaptive_voxel_filter_options() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LocalTrajectoryBuilderOptions::clear_adaptive_voxel_filter_options() {
  if (adaptive_voxel_filter_options_ != NULL) adaptive_voxel_filter_options_->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::Clear();
  clear_has_adaptive_voxel_filter_options();
}
inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions::adaptive_voxel_filter_options() const {
  return adaptive_voxel_filter_options_ != NULL ? *adaptive_voxel_filter_options_ : *default_instance_->adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::mutable_adaptive_voxel_filter_options() {
  set_has_adaptive_voxel_filter_options();
  if (adaptive_voxel_filter_options_ == NULL) adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  return adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::release_adaptive_voxel_filter_options() {
  clear_has_adaptive_voxel_filter_options();
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = NULL;
  return temp;
}
inline void LocalTrajectoryBuilderOptions::set_allocated_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options) {
  delete adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = adaptive_voxel_filter_options;
  if (adaptive_voxel_filter_options) {
    set_has_adaptive_voxel_filter_options();
  } else {
    clear_has_adaptive_voxel_filter_options();
  }
}

// optional bool use_online_correlative_scan_matching = 5;
inline bool LocalTrajectoryBuilderOptions::has_use_online_correlative_scan_matching() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_use_online_correlative_scan_matching() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_use_online_correlative_scan_matching() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LocalTrajectoryBuilderOptions::clear_use_online_correlative_scan_matching() {
  use_online_correlative_scan_matching_ = false;
  clear_has_use_online_correlative_scan_matching();
}
inline bool LocalTrajectoryBuilderOptions::use_online_correlative_scan_matching() const {
  return use_online_correlative_scan_matching_;
}
inline void LocalTrajectoryBuilderOptions::set_use_online_correlative_scan_matching(bool value) {
  set_has_use_online_correlative_scan_matching();
  use_online_correlative_scan_matching_ = value;
}

// optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
inline bool LocalTrajectoryBuilderOptions::has_real_time_correlative_scan_matcher_options() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_real_time_correlative_scan_matcher_options() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_real_time_correlative_scan_matcher_options() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LocalTrajectoryBuilderOptions::clear_real_time_correlative_scan_matcher_options() {
  if (real_time_correlative_scan_matcher_options_ != NULL) real_time_correlative_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::Clear();
  clear_has_real_time_correlative_scan_matcher_options();
}
inline const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& LocalTrajectoryBuilderOptions::real_time_correlative_scan_matcher_options() const {
  return real_time_correlative_scan_matcher_options_ != NULL ? *real_time_correlative_scan_matcher_options_ : *default_instance_->real_time_correlative_scan_matcher_options_;
}
inline ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions::mutable_real_time_correlative_scan_matcher_options() {
  set_has_real_time_correlative_scan_matcher_options();
  if (real_time_correlative_scan_matcher_options_ == NULL) real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions;
  return real_time_correlative_scan_matcher_options_;
}
inline ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions::release_real_time_correlative_scan_matcher_options() {
  clear_has_real_time_correlative_scan_matcher_options();
  ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* temp = real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
  return temp;
}
inline void LocalTrajectoryBuilderOptions::set_allocated_real_time_correlative_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options) {
  delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = real_time_correlative_scan_matcher_options;
  if (real_time_correlative_scan_matcher_options) {
    set_has_real_time_correlative_scan_matcher_options();
  } else {
    clear_has_real_time_correlative_scan_matcher_options();
  }
}

// optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 8;
inline bool LocalTrajectoryBuilderOptions::has_ceres_scan_matcher_options() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_ceres_scan_matcher_options() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_ceres_scan_matcher_options() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LocalTrajectoryBuilderOptions::clear_ceres_scan_matcher_options() {
  if (ceres_scan_matcher_options_ != NULL) ceres_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions::Clear();
  clear_has_ceres_scan_matcher_options();
}
inline const ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions& LocalTrajectoryBuilderOptions::ceres_scan_matcher_options() const {
  return ceres_scan_matcher_options_ != NULL ? *ceres_scan_matcher_options_ : *default_instance_->ceres_scan_matcher_options_;
}
inline ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* LocalTrajectoryBuilderOptions::mutable_ceres_scan_matcher_options() {
  set_has_ceres_scan_matcher_options();
  if (ceres_scan_matcher_options_ == NULL) ceres_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions;
  return ceres_scan_matcher_options_;
}
inline ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* LocalTrajectoryBuilderOptions::release_ceres_scan_matcher_options() {
  clear_has_ceres_scan_matcher_options();
  ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* temp = ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
  return temp;
}
inline void LocalTrajectoryBuilderOptions::set_allocated_ceres_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options) {
  delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  if (ceres_scan_matcher_options) {
    set_has_ceres_scan_matcher_options();
  } else {
    clear_has_ceres_scan_matcher_options();
  }
}

// optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 13;
inline bool LocalTrajectoryBuilderOptions::has_motion_filter_options() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_motion_filter_options() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_motion_filter_options() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LocalTrajectoryBuilderOptions::clear_motion_filter_options() {
  if (motion_filter_options_ != NULL) motion_filter_options_->::cartographer::mapping_3d::proto::MotionFilterOptions::Clear();
  clear_has_motion_filter_options();
}
inline const ::cartographer::mapping_3d::proto::MotionFilterOptions& LocalTrajectoryBuilderOptions::motion_filter_options() const {
  return motion_filter_options_ != NULL ? *motion_filter_options_ : *default_instance_->motion_filter_options_;
}
inline ::cartographer::mapping_3d::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions::mutable_motion_filter_options() {
  set_has_motion_filter_options();
  if (motion_filter_options_ == NULL) motion_filter_options_ = new ::cartographer::mapping_3d::proto::MotionFilterOptions;
  return motion_filter_options_;
}
inline ::cartographer::mapping_3d::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions::release_motion_filter_options() {
  clear_has_motion_filter_options();
  ::cartographer::mapping_3d::proto::MotionFilterOptions* temp = motion_filter_options_;
  motion_filter_options_ = NULL;
  return temp;
}
inline void LocalTrajectoryBuilderOptions::set_allocated_motion_filter_options(::cartographer::mapping_3d::proto::MotionFilterOptions* motion_filter_options) {
  delete motion_filter_options_;
  motion_filter_options_ = motion_filter_options;
  if (motion_filter_options) {
    set_has_motion_filter_options();
  } else {
    clear_has_motion_filter_options();
  }
}

// optional double imu_gravity_time_constant = 17;
inline bool LocalTrajectoryBuilderOptions::has_imu_gravity_time_constant() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_imu_gravity_time_constant() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_imu_gravity_time_constant() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LocalTrajectoryBuilderOptions::clear_imu_gravity_time_constant() {
  imu_gravity_time_constant_ = 0;
  clear_has_imu_gravity_time_constant();
}
inline double LocalTrajectoryBuilderOptions::imu_gravity_time_constant() const {
  return imu_gravity_time_constant_;
}
inline void LocalTrajectoryBuilderOptions::set_imu_gravity_time_constant(double value) {
  set_has_imu_gravity_time_constant();
  imu_gravity_time_constant_ = value;
}

// optional int32 num_odometry_states = 18;
inline bool LocalTrajectoryBuilderOptions::has_num_odometry_states() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_num_odometry_states() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_num_odometry_states() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LocalTrajectoryBuilderOptions::clear_num_odometry_states() {
  num_odometry_states_ = 0;
  clear_has_num_odometry_states();
}
inline ::google::protobuf::int32 LocalTrajectoryBuilderOptions::num_odometry_states() const {
  return num_odometry_states_;
}
inline void LocalTrajectoryBuilderOptions::set_num_odometry_states(::google::protobuf::int32 value) {
  set_has_num_odometry_states();
  num_odometry_states_ = value;
}

// optional .cartographer.mapping_2d.proto.SubmapsOptions submaps_options = 11;
inline bool LocalTrajectoryBuilderOptions::has_submaps_options() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_submaps_options() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_submaps_options() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LocalTrajectoryBuilderOptions::clear_submaps_options() {
  if (submaps_options_ != NULL) submaps_options_->::cartographer::mapping_2d::proto::SubmapsOptions::Clear();
  clear_has_submaps_options();
}
inline const ::cartographer::mapping_2d::proto::SubmapsOptions& LocalTrajectoryBuilderOptions::submaps_options() const {
  return submaps_options_ != NULL ? *submaps_options_ : *default_instance_->submaps_options_;
}
inline ::cartographer::mapping_2d::proto::SubmapsOptions* LocalTrajectoryBuilderOptions::mutable_submaps_options() {
  set_has_submaps_options();
  if (submaps_options_ == NULL) submaps_options_ = new ::cartographer::mapping_2d::proto::SubmapsOptions;
  return submaps_options_;
}
inline ::cartographer::mapping_2d::proto::SubmapsOptions* LocalTrajectoryBuilderOptions::release_submaps_options() {
  clear_has_submaps_options();
  ::cartographer::mapping_2d::proto::SubmapsOptions* temp = submaps_options_;
  submaps_options_ = NULL;
  return temp;
}
inline void LocalTrajectoryBuilderOptions::set_allocated_submaps_options(::cartographer::mapping_2d::proto::SubmapsOptions* submaps_options) {
  delete submaps_options_;
  submaps_options_ = submaps_options;
  if (submaps_options) {
    set_has_submaps_options();
  } else {
    clear_has_submaps_options();
  }
}

// optional bool use_imu_data = 12;
inline bool LocalTrajectoryBuilderOptions::has_use_imu_data() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LocalTrajectoryBuilderOptions::set_has_use_imu_data() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LocalTrajectoryBuilderOptions::clear_has_use_imu_data() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LocalTrajectoryBuilderOptions::clear_use_imu_data() {
  use_imu_data_ = false;
  clear_has_use_imu_data();
}
inline bool LocalTrajectoryBuilderOptions::use_imu_data() const {
  return use_imu_data_;
}
inline void LocalTrajectoryBuilderOptions::set_use_imu_data(bool value) {
  set_has_use_imu_data();
  use_imu_data_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_2d
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED
