// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_2d/proto/map_limits.proto

#ifndef PROTOBUF_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping_2d/proto/cell_limits.pb.h"
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_2d {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto();

class MapLimits;

// ===================================================================

class MapLimits : public ::google::protobuf::Message {
 public:
  MapLimits();
  virtual ~MapLimits();

  MapLimits(const MapLimits& from);

  inline MapLimits& operator=(const MapLimits& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapLimits& default_instance();

  void Swap(MapLimits* other);

  // implements Message ----------------------------------------------

  MapLimits* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapLimits& from);
  void MergeFrom(const MapLimits& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double resolution = 1;
  inline bool has_resolution() const;
  inline void clear_resolution();
  static const int kResolutionFieldNumber = 1;
  inline double resolution() const;
  inline void set_resolution(double value);

  // optional .cartographer.transform.proto.Vector2d max = 2;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 2;
  inline const ::cartographer::transform::proto::Vector2d& max() const;
  inline ::cartographer::transform::proto::Vector2d* mutable_max();
  inline ::cartographer::transform::proto::Vector2d* release_max();
  inline void set_allocated_max(::cartographer::transform::proto::Vector2d* max);

  // optional .cartographer.mapping_2d.proto.CellLimits cell_limits = 3;
  inline bool has_cell_limits() const;
  inline void clear_cell_limits();
  static const int kCellLimitsFieldNumber = 3;
  inline const ::cartographer::mapping_2d::proto::CellLimits& cell_limits() const;
  inline ::cartographer::mapping_2d::proto::CellLimits* mutable_cell_limits();
  inline ::cartographer::mapping_2d::proto::CellLimits* release_cell_limits();
  inline void set_allocated_cell_limits(::cartographer::mapping_2d::proto::CellLimits* cell_limits);

  // @@protoc_insertion_point(class_scope:cartographer.mapping_2d.proto.MapLimits)
 private:
  inline void set_has_resolution();
  inline void clear_has_resolution();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_cell_limits();
  inline void clear_has_cell_limits();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double resolution_;
  ::cartographer::transform::proto::Vector2d* max_;
  ::cartographer::mapping_2d::proto::CellLimits* cell_limits_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto();

  void InitAsDefaultInstance();
  static MapLimits* default_instance_;
};
// ===================================================================


// ===================================================================

// MapLimits

// optional double resolution = 1;
inline bool MapLimits::has_resolution() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapLimits::set_has_resolution() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapLimits::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapLimits::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
inline double MapLimits::resolution() const {
  return resolution_;
}
inline void MapLimits::set_resolution(double value) {
  set_has_resolution();
  resolution_ = value;
}

// optional .cartographer.transform.proto.Vector2d max = 2;
inline bool MapLimits::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapLimits::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapLimits::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapLimits::clear_max() {
  if (max_ != NULL) max_->::cartographer::transform::proto::Vector2d::Clear();
  clear_has_max();
}
inline const ::cartographer::transform::proto::Vector2d& MapLimits::max() const {
  return max_ != NULL ? *max_ : *default_instance_->max_;
}
inline ::cartographer::transform::proto::Vector2d* MapLimits::mutable_max() {
  set_has_max();
  if (max_ == NULL) max_ = new ::cartographer::transform::proto::Vector2d;
  return max_;
}
inline ::cartographer::transform::proto::Vector2d* MapLimits::release_max() {
  clear_has_max();
  ::cartographer::transform::proto::Vector2d* temp = max_;
  max_ = NULL;
  return temp;
}
inline void MapLimits::set_allocated_max(::cartographer::transform::proto::Vector2d* max) {
  delete max_;
  max_ = max;
  if (max) {
    set_has_max();
  } else {
    clear_has_max();
  }
}

// optional .cartographer.mapping_2d.proto.CellLimits cell_limits = 3;
inline bool MapLimits::has_cell_limits() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapLimits::set_has_cell_limits() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapLimits::clear_has_cell_limits() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapLimits::clear_cell_limits() {
  if (cell_limits_ != NULL) cell_limits_->::cartographer::mapping_2d::proto::CellLimits::Clear();
  clear_has_cell_limits();
}
inline const ::cartographer::mapping_2d::proto::CellLimits& MapLimits::cell_limits() const {
  return cell_limits_ != NULL ? *cell_limits_ : *default_instance_->cell_limits_;
}
inline ::cartographer::mapping_2d::proto::CellLimits* MapLimits::mutable_cell_limits() {
  set_has_cell_limits();
  if (cell_limits_ == NULL) cell_limits_ = new ::cartographer::mapping_2d::proto::CellLimits;
  return cell_limits_;
}
inline ::cartographer::mapping_2d::proto::CellLimits* MapLimits::release_cell_limits() {
  clear_has_cell_limits();
  ::cartographer::mapping_2d::proto::CellLimits* temp = cell_limits_;
  cell_limits_ = NULL;
  return temp;
}
inline void MapLimits::set_allocated_cell_limits(::cartographer::mapping_2d::proto::CellLimits* cell_limits) {
  delete cell_limits_;
  cell_limits_ = cell_limits;
  if (cell_limits) {
    set_has_cell_limits();
  } else {
    clear_has_cell_limits();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_2d
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto__INCLUDED
