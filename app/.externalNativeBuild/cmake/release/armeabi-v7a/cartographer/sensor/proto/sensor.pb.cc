// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/sensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/sensor/proto/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace sensor {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* CompressedPointCloud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedPointCloud_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImuData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImuData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressedRangeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedRangeData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/sensor/proto/sensor.proto");
  GOOGLE_CHECK(file != NULL);
  CompressedPointCloud_descriptor_ = file->message_type(0);
  static const int CompressedPointCloud_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, num_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, point_data_),
  };
  CompressedPointCloud_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompressedPointCloud_descriptor_,
      CompressedPointCloud::default_instance_,
      CompressedPointCloud_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompressedPointCloud));
  ImuData_descriptor_ = file->message_type(1);
  static const int ImuData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, linear_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, angular_velocity_),
  };
  ImuData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImuData_descriptor_,
      ImuData::default_instance_,
      ImuData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImuData));
  CompressedRangeData_descriptor_ = file->message_type(2);
  static const int CompressedRangeData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRangeData, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRangeData, returns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRangeData, misses_),
  };
  CompressedRangeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompressedRangeData_descriptor_,
      CompressedRangeData::default_instance_,
      CompressedRangeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRangeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRangeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompressedRangeData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompressedPointCloud_descriptor_, &CompressedPointCloud::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImuData_descriptor_, &ImuData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompressedRangeData_descriptor_, &CompressedRangeData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  delete CompressedPointCloud::default_instance_;
  delete CompressedPointCloud_reflection_;
  delete ImuData::default_instance_;
  delete ImuData_reflection_;
  delete CompressedRangeData::default_instance_;
  delete CompressedRangeData_reflection_;
}

void protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&cartographer/sensor/proto/sensor.proto"
    "\022\031cartographer.sensor.proto\032,cartographe"
    "r/transform/proto/transform.proto\"B\n\024Com"
    "pressedPointCloud\022\022\n\nnum_points\030\001 \001(\005\022\026\n"
    "\npoint_data\030\003 \003(\005B\002\020\001\"\243\001\n\007ImuData\022\021\n\ttim"
    "estamp\030\001 \001(\003\022C\n\023linear_acceleration\030\002 \001("
    "\0132&.cartographer.transform.proto.Vector3"
    "d\022@\n\020angular_velocity\030\003 \001(\0132&.cartograph"
    "er.transform.proto.Vector3d\"\320\001\n\023Compress"
    "edRangeData\0226\n\006origin\030\001 \001(\0132&.cartograph"
    "er.transform.proto.Vector3f\022@\n\007returns\030\002"
    " \001(\0132/.cartographer.sensor.proto.Compres"
    "sedPointCloud\022\?\n\006misses\030\003 \001(\0132/.cartogra"
    "pher.sensor.proto.CompressedPointCloudB\010"
    "B\006Sensor", 568);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/sensor/proto/sensor.proto", &protobuf_RegisterTypes);
  CompressedPointCloud::default_instance_ = new CompressedPointCloud();
  ImuData::default_instance_ = new ImuData();
  CompressedRangeData::default_instance_ = new CompressedRangeData();
  CompressedPointCloud::default_instance_->InitAsDefaultInstance();
  ImuData::default_instance_->InitAsDefaultInstance();
  CompressedRangeData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fsensor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fsensor_2fproto_2fsensor_2eproto {
  StaticDescriptorInitializer_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
    protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  }
} static_descriptor_initializer_cartographer_2fsensor_2fproto_2fsensor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CompressedPointCloud::kNumPointsFieldNumber;
const int CompressedPointCloud::kPointDataFieldNumber;
#endif  // !_MSC_VER

CompressedPointCloud::CompressedPointCloud()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompressedPointCloud::InitAsDefaultInstance() {
}

CompressedPointCloud::CompressedPointCloud(const CompressedPointCloud& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompressedPointCloud::SharedCtor() {
  _cached_size_ = 0;
  num_points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompressedPointCloud::~CompressedPointCloud() {
  SharedDtor();
}

void CompressedPointCloud::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompressedPointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedPointCloud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedPointCloud_descriptor_;
}

const CompressedPointCloud& CompressedPointCloud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

CompressedPointCloud* CompressedPointCloud::default_instance_ = NULL;

CompressedPointCloud* CompressedPointCloud::New() const {
  return new CompressedPointCloud;
}

void CompressedPointCloud::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_points_ = 0;
  }
  point_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompressedPointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_points_)));
          set_has_num_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_point_data;
        break;
      }

      // repeated int32 point_data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_point_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_point_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompressedPointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_points = 1;
  if (has_num_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_points(), output);
  }

  // repeated int32 point_data = 3 [packed = true];
  if (this->point_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_point_data_cached_byte_size_);
  }
  for (int i = 0; i < this->point_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->point_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompressedPointCloud::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num_points = 1;
  if (has_num_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_points(), target);
  }

  // repeated int32 point_data = 3 [packed = true];
  if (this->point_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _point_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->point_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->point_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompressedPointCloud::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_points = 1;
    if (has_num_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_points());
    }

  }
  // repeated int32 point_data = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->point_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->point_data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedPointCloud::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompressedPointCloud* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompressedPointCloud*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompressedPointCloud::MergeFrom(const CompressedPointCloud& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_data_.MergeFrom(from.point_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_points()) {
      set_num_points(from.num_points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompressedPointCloud::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedPointCloud::CopyFrom(const CompressedPointCloud& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedPointCloud::IsInitialized() const {

  return true;
}

void CompressedPointCloud::Swap(CompressedPointCloud* other) {
  if (other != this) {
    std::swap(num_points_, other->num_points_);
    point_data_.Swap(&other->point_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompressedPointCloud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedPointCloud_descriptor_;
  metadata.reflection = CompressedPointCloud_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImuData::kTimestampFieldNumber;
const int ImuData::kLinearAccelerationFieldNumber;
const int ImuData::kAngularVelocityFieldNumber;
#endif  // !_MSC_VER

ImuData::ImuData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImuData::InitAsDefaultInstance() {
  linear_acceleration_ = const_cast< ::cartographer::transform::proto::Vector3d*>(&::cartographer::transform::proto::Vector3d::default_instance());
  angular_velocity_ = const_cast< ::cartographer::transform::proto::Vector3d*>(&::cartographer::transform::proto::Vector3d::default_instance());
}

ImuData::ImuData(const ImuData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImuData::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  linear_acceleration_ = NULL;
  angular_velocity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImuData::~ImuData() {
  SharedDtor();
}

void ImuData::SharedDtor() {
  if (this != default_instance_) {
    delete linear_acceleration_;
    delete angular_velocity_;
  }
}

void ImuData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImuData_descriptor_;
}

const ImuData& ImuData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

ImuData* ImuData::default_instance_ = NULL;

ImuData* ImuData::New() const {
  return new ImuData;
}

void ImuData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_linear_acceleration()) {
      if (linear_acceleration_ != NULL) linear_acceleration_->::cartographer::transform::proto::Vector3d::Clear();
    }
    if (has_angular_velocity()) {
      if (angular_velocity_ != NULL) angular_velocity_->::cartographer::transform::proto::Vector3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_linear_acceleration;
        break;
      }

      // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_linear_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_angular_velocity;
        break;
      }

      // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->linear_acceleration(), output);
  }

  // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->angular_velocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImuData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->linear_acceleration(), target);
  }

  // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->angular_velocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImuData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
    if (has_linear_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_acceleration());
    }

    // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angular_velocity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImuData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImuData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_linear_acceleration()) {
      mutable_linear_acceleration()->::cartographer::transform::proto::Vector3d::MergeFrom(from.linear_acceleration());
    }
    if (from.has_angular_velocity()) {
      mutable_angular_velocity()->::cartographer::transform::proto::Vector3d::MergeFrom(from.angular_velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImuData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {

  return true;
}

void ImuData::Swap(ImuData* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(linear_acceleration_, other->linear_acceleration_);
    std::swap(angular_velocity_, other->angular_velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImuData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImuData_descriptor_;
  metadata.reflection = ImuData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompressedRangeData::kOriginFieldNumber;
const int CompressedRangeData::kReturnsFieldNumber;
const int CompressedRangeData::kMissesFieldNumber;
#endif  // !_MSC_VER

CompressedRangeData::CompressedRangeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompressedRangeData::InitAsDefaultInstance() {
  origin_ = const_cast< ::cartographer::transform::proto::Vector3f*>(&::cartographer::transform::proto::Vector3f::default_instance());
  returns_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(&::cartographer::sensor::proto::CompressedPointCloud::default_instance());
  misses_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(&::cartographer::sensor::proto::CompressedPointCloud::default_instance());
}

CompressedRangeData::CompressedRangeData(const CompressedRangeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompressedRangeData::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  returns_ = NULL;
  misses_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompressedRangeData::~CompressedRangeData() {
  SharedDtor();
}

void CompressedRangeData::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete returns_;
    delete misses_;
  }
}

void CompressedRangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedRangeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedRangeData_descriptor_;
}

const CompressedRangeData& CompressedRangeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

CompressedRangeData* CompressedRangeData::default_instance_ = NULL;

CompressedRangeData* CompressedRangeData::New() const {
  return new CompressedRangeData;
}

void CompressedRangeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_origin()) {
      if (origin_ != NULL) origin_->::cartographer::transform::proto::Vector3f::Clear();
    }
    if (has_returns()) {
      if (returns_ != NULL) returns_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
    }
    if (has_misses()) {
      if (misses_ != NULL) misses_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompressedRangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Vector3f origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_returns;
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud returns = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_returns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_returns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_misses;
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud misses = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_misses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_misses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompressedRangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cartographer.transform.proto.Vector3f origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->origin(), output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud returns = 2;
  if (has_returns()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->returns(), output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud misses = 3;
  if (has_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->misses(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompressedRangeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cartographer.transform.proto.Vector3f origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->origin(), target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud returns = 2;
  if (has_returns()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->returns(), target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud misses = 3;
  if (has_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->misses(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompressedRangeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cartographer.transform.proto.Vector3f origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // optional .cartographer.sensor.proto.CompressedPointCloud returns = 2;
    if (has_returns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->returns());
    }

    // optional .cartographer.sensor.proto.CompressedPointCloud misses = 3;
    if (has_misses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->misses());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedRangeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompressedRangeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompressedRangeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompressedRangeData::MergeFrom(const CompressedRangeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::cartographer::transform::proto::Vector3f::MergeFrom(from.origin());
    }
    if (from.has_returns()) {
      mutable_returns()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.returns());
    }
    if (from.has_misses()) {
      mutable_misses()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.misses());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompressedRangeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedRangeData::CopyFrom(const CompressedRangeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedRangeData::IsInitialized() const {

  return true;
}

void CompressedRangeData::Swap(CompressedRangeData* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(returns_, other->returns_);
    std::swap(misses_, other->misses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompressedRangeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedRangeData_descriptor_;
  metadata.reflection = CompressedRangeData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
