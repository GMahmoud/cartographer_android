// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/adaptive_voxel_filter_options.proto

#ifndef PROTOBUF_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace sensor {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();
void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();
void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();

class AdaptiveVoxelFilterOptions;

// ===================================================================

class AdaptiveVoxelFilterOptions : public ::google::protobuf::Message {
 public:
  AdaptiveVoxelFilterOptions();
  virtual ~AdaptiveVoxelFilterOptions();

  AdaptiveVoxelFilterOptions(const AdaptiveVoxelFilterOptions& from);

  inline AdaptiveVoxelFilterOptions& operator=(const AdaptiveVoxelFilterOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdaptiveVoxelFilterOptions& default_instance();

  void Swap(AdaptiveVoxelFilterOptions* other);

  // implements Message ----------------------------------------------

  AdaptiveVoxelFilterOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdaptiveVoxelFilterOptions& from);
  void MergeFrom(const AdaptiveVoxelFilterOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float max_length = 1;
  inline bool has_max_length() const;
  inline void clear_max_length();
  static const int kMaxLengthFieldNumber = 1;
  inline float max_length() const;
  inline void set_max_length(float value);

  // optional float min_num_points = 2;
  inline bool has_min_num_points() const;
  inline void clear_min_num_points();
  static const int kMinNumPointsFieldNumber = 2;
  inline float min_num_points() const;
  inline void set_min_num_points(float value);

  // optional float max_range = 3;
  inline bool has_max_range() const;
  inline void clear_max_range();
  static const int kMaxRangeFieldNumber = 3;
  inline float max_range() const;
  inline void set_max_range(float value);

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
 private:
  inline void set_has_max_length();
  inline void clear_has_max_length();
  inline void set_has_min_num_points();
  inline void clear_has_min_num_points();
  inline void set_has_max_range();
  inline void clear_has_max_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float max_length_;
  float min_num_points_;
  float max_range_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();

  void InitAsDefaultInstance();
  static AdaptiveVoxelFilterOptions* default_instance_;
};
// ===================================================================


// ===================================================================

// AdaptiveVoxelFilterOptions

// optional float max_length = 1;
inline bool AdaptiveVoxelFilterOptions::has_max_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdaptiveVoxelFilterOptions::set_has_max_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdaptiveVoxelFilterOptions::clear_has_max_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdaptiveVoxelFilterOptions::clear_max_length() {
  max_length_ = 0;
  clear_has_max_length();
}
inline float AdaptiveVoxelFilterOptions::max_length() const {
  return max_length_;
}
inline void AdaptiveVoxelFilterOptions::set_max_length(float value) {
  set_has_max_length();
  max_length_ = value;
}

// optional float min_num_points = 2;
inline bool AdaptiveVoxelFilterOptions::has_min_num_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdaptiveVoxelFilterOptions::set_has_min_num_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdaptiveVoxelFilterOptions::clear_has_min_num_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdaptiveVoxelFilterOptions::clear_min_num_points() {
  min_num_points_ = 0;
  clear_has_min_num_points();
}
inline float AdaptiveVoxelFilterOptions::min_num_points() const {
  return min_num_points_;
}
inline void AdaptiveVoxelFilterOptions::set_min_num_points(float value) {
  set_has_min_num_points();
  min_num_points_ = value;
}

// optional float max_range = 3;
inline bool AdaptiveVoxelFilterOptions::has_max_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdaptiveVoxelFilterOptions::set_has_max_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdaptiveVoxelFilterOptions::clear_has_max_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdaptiveVoxelFilterOptions::clear_max_range() {
  max_range_ = 0;
  clear_has_max_range();
}
inline float AdaptiveVoxelFilterOptions::max_range() const {
  return max_range_;
}
inline void AdaptiveVoxelFilterOptions::set_max_range(float value) {
  set_has_max_range();
  max_range_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto__INCLUDED
