// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/sensor.proto

#ifndef PROTOBUF_cartographer_2fsensor_2fproto_2fsensor_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fsensor_2fproto_2fsensor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace sensor {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fsensor_2eproto();

class CompressedPointCloud;
class ImuData;
class CompressedRangeData;

// ===================================================================

class CompressedPointCloud : public ::google::protobuf::Message {
 public:
  CompressedPointCloud();
  virtual ~CompressedPointCloud();

  CompressedPointCloud(const CompressedPointCloud& from);

  inline CompressedPointCloud& operator=(const CompressedPointCloud& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressedPointCloud& default_instance();

  void Swap(CompressedPointCloud* other);

  // implements Message ----------------------------------------------

  CompressedPointCloud* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompressedPointCloud& from);
  void MergeFrom(const CompressedPointCloud& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_points = 1;
  inline bool has_num_points() const;
  inline void clear_num_points();
  static const int kNumPointsFieldNumber = 1;
  inline ::google::protobuf::int32 num_points() const;
  inline void set_num_points(::google::protobuf::int32 value);

  // repeated int32 point_data = 3 [packed = true];
  inline int point_data_size() const;
  inline void clear_point_data();
  static const int kPointDataFieldNumber = 3;
  inline ::google::protobuf::int32 point_data(int index) const;
  inline void set_point_data(int index, ::google::protobuf::int32 value);
  inline void add_point_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      point_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_point_data();

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.CompressedPointCloud)
 private:
  inline void set_has_num_points();
  inline void clear_has_num_points();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > point_data_;
  mutable int _point_data_cached_byte_size_;
  ::google::protobuf::int32 num_points_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fsensor_2eproto();

  void InitAsDefaultInstance();
  static CompressedPointCloud* default_instance_;
};
// -------------------------------------------------------------------

class ImuData : public ::google::protobuf::Message {
 public:
  ImuData();
  virtual ~ImuData();

  ImuData(const ImuData& from);

  inline ImuData& operator=(const ImuData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImuData& default_instance();

  void Swap(ImuData* other);

  // implements Message ----------------------------------------------

  ImuData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImuData& from);
  void MergeFrom(const ImuData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  inline bool has_linear_acceleration() const;
  inline void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 2;
  inline const ::cartographer::transform::proto::Vector3d& linear_acceleration() const;
  inline ::cartographer::transform::proto::Vector3d* mutable_linear_acceleration();
  inline ::cartographer::transform::proto::Vector3d* release_linear_acceleration();
  inline void set_allocated_linear_acceleration(::cartographer::transform::proto::Vector3d* linear_acceleration);

  // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
  inline bool has_angular_velocity() const;
  inline void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 3;
  inline const ::cartographer::transform::proto::Vector3d& angular_velocity() const;
  inline ::cartographer::transform::proto::Vector3d* mutable_angular_velocity();
  inline ::cartographer::transform::proto::Vector3d* release_angular_velocity();
  inline void set_allocated_angular_velocity(::cartographer::transform::proto::Vector3d* angular_velocity);

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.ImuData)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_linear_acceleration();
  inline void clear_has_linear_acceleration();
  inline void set_has_angular_velocity();
  inline void clear_has_angular_velocity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 timestamp_;
  ::cartographer::transform::proto::Vector3d* linear_acceleration_;
  ::cartographer::transform::proto::Vector3d* angular_velocity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fsensor_2eproto();

  void InitAsDefaultInstance();
  static ImuData* default_instance_;
};
// -------------------------------------------------------------------

class CompressedRangeData : public ::google::protobuf::Message {
 public:
  CompressedRangeData();
  virtual ~CompressedRangeData();

  CompressedRangeData(const CompressedRangeData& from);

  inline CompressedRangeData& operator=(const CompressedRangeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressedRangeData& default_instance();

  void Swap(CompressedRangeData* other);

  // implements Message ----------------------------------------------

  CompressedRangeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompressedRangeData& from);
  void MergeFrom(const CompressedRangeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Vector3f origin = 1;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 1;
  inline const ::cartographer::transform::proto::Vector3f& origin() const;
  inline ::cartographer::transform::proto::Vector3f* mutable_origin();
  inline ::cartographer::transform::proto::Vector3f* release_origin();
  inline void set_allocated_origin(::cartographer::transform::proto::Vector3f* origin);

  // optional .cartographer.sensor.proto.CompressedPointCloud returns = 2;
  inline bool has_returns() const;
  inline void clear_returns();
  static const int kReturnsFieldNumber = 2;
  inline const ::cartographer::sensor::proto::CompressedPointCloud& returns() const;
  inline ::cartographer::sensor::proto::CompressedPointCloud* mutable_returns();
  inline ::cartographer::sensor::proto::CompressedPointCloud* release_returns();
  inline void set_allocated_returns(::cartographer::sensor::proto::CompressedPointCloud* returns);

  // optional .cartographer.sensor.proto.CompressedPointCloud misses = 3;
  inline bool has_misses() const;
  inline void clear_misses();
  static const int kMissesFieldNumber = 3;
  inline const ::cartographer::sensor::proto::CompressedPointCloud& misses() const;
  inline ::cartographer::sensor::proto::CompressedPointCloud* mutable_misses();
  inline ::cartographer::sensor::proto::CompressedPointCloud* release_misses();
  inline void set_allocated_misses(::cartographer::sensor::proto::CompressedPointCloud* misses);

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.CompressedRangeData)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_returns();
  inline void clear_has_returns();
  inline void set_has_misses();
  inline void clear_has_misses();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::cartographer::transform::proto::Vector3f* origin_;
  ::cartographer::sensor::proto::CompressedPointCloud* returns_;
  ::cartographer::sensor::proto::CompressedPointCloud* misses_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fsensor_2eproto();

  void InitAsDefaultInstance();
  static CompressedRangeData* default_instance_;
};
// ===================================================================


// ===================================================================

// CompressedPointCloud

// optional int32 num_points = 1;
inline bool CompressedPointCloud::has_num_points() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompressedPointCloud::set_has_num_points() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompressedPointCloud::clear_has_num_points() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompressedPointCloud::clear_num_points() {
  num_points_ = 0;
  clear_has_num_points();
}
inline ::google::protobuf::int32 CompressedPointCloud::num_points() const {
  return num_points_;
}
inline void CompressedPointCloud::set_num_points(::google::protobuf::int32 value) {
  set_has_num_points();
  num_points_ = value;
}

// repeated int32 point_data = 3 [packed = true];
inline int CompressedPointCloud::point_data_size() const {
  return point_data_.size();
}
inline void CompressedPointCloud::clear_point_data() {
  point_data_.Clear();
}
inline ::google::protobuf::int32 CompressedPointCloud::point_data(int index) const {
  return point_data_.Get(index);
}
inline void CompressedPointCloud::set_point_data(int index, ::google::protobuf::int32 value) {
  point_data_.Set(index, value);
}
inline void CompressedPointCloud::add_point_data(::google::protobuf::int32 value) {
  point_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CompressedPointCloud::point_data() const {
  return point_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CompressedPointCloud::mutable_point_data() {
  return &point_data_;
}

// -------------------------------------------------------------------

// ImuData

// optional int64 timestamp = 1;
inline bool ImuData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImuData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImuData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImuData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 ImuData::timestamp() const {
  return timestamp_;
}
inline void ImuData::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
inline bool ImuData::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImuData::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImuData::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImuData::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::cartographer::transform::proto::Vector3d::Clear();
  clear_has_linear_acceleration();
}
inline const ::cartographer::transform::proto::Vector3d& ImuData::linear_acceleration() const {
  return linear_acceleration_ != NULL ? *linear_acceleration_ : *default_instance_->linear_acceleration_;
}
inline ::cartographer::transform::proto::Vector3d* ImuData::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) linear_acceleration_ = new ::cartographer::transform::proto::Vector3d;
  return linear_acceleration_;
}
inline ::cartographer::transform::proto::Vector3d* ImuData::release_linear_acceleration() {
  clear_has_linear_acceleration();
  ::cartographer::transform::proto::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
inline void ImuData::set_allocated_linear_acceleration(::cartographer::transform::proto::Vector3d* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
}

// optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
inline bool ImuData::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImuData::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImuData::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImuData::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::cartographer::transform::proto::Vector3d::Clear();
  clear_has_angular_velocity();
}
inline const ::cartographer::transform::proto::Vector3d& ImuData::angular_velocity() const {
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
inline ::cartographer::transform::proto::Vector3d* ImuData::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) angular_velocity_ = new ::cartographer::transform::proto::Vector3d;
  return angular_velocity_;
}
inline ::cartographer::transform::proto::Vector3d* ImuData::release_angular_velocity() {
  clear_has_angular_velocity();
  ::cartographer::transform::proto::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline void ImuData::set_allocated_angular_velocity(::cartographer::transform::proto::Vector3d* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
}

// -------------------------------------------------------------------

// CompressedRangeData

// optional .cartographer.transform.proto.Vector3f origin = 1;
inline bool CompressedRangeData::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompressedRangeData::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompressedRangeData::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompressedRangeData::clear_origin() {
  if (origin_ != NULL) origin_->::cartographer::transform::proto::Vector3f::Clear();
  clear_has_origin();
}
inline const ::cartographer::transform::proto::Vector3f& CompressedRangeData::origin() const {
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::cartographer::transform::proto::Vector3f* CompressedRangeData::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::cartographer::transform::proto::Vector3f;
  return origin_;
}
inline ::cartographer::transform::proto::Vector3f* CompressedRangeData::release_origin() {
  clear_has_origin();
  ::cartographer::transform::proto::Vector3f* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CompressedRangeData::set_allocated_origin(::cartographer::transform::proto::Vector3f* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
}

// optional .cartographer.sensor.proto.CompressedPointCloud returns = 2;
inline bool CompressedRangeData::has_returns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompressedRangeData::set_has_returns() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompressedRangeData::clear_has_returns() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompressedRangeData::clear_returns() {
  if (returns_ != NULL) returns_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
  clear_has_returns();
}
inline const ::cartographer::sensor::proto::CompressedPointCloud& CompressedRangeData::returns() const {
  return returns_ != NULL ? *returns_ : *default_instance_->returns_;
}
inline ::cartographer::sensor::proto::CompressedPointCloud* CompressedRangeData::mutable_returns() {
  set_has_returns();
  if (returns_ == NULL) returns_ = new ::cartographer::sensor::proto::CompressedPointCloud;
  return returns_;
}
inline ::cartographer::sensor::proto::CompressedPointCloud* CompressedRangeData::release_returns() {
  clear_has_returns();
  ::cartographer::sensor::proto::CompressedPointCloud* temp = returns_;
  returns_ = NULL;
  return temp;
}
inline void CompressedRangeData::set_allocated_returns(::cartographer::sensor::proto::CompressedPointCloud* returns) {
  delete returns_;
  returns_ = returns;
  if (returns) {
    set_has_returns();
  } else {
    clear_has_returns();
  }
}

// optional .cartographer.sensor.proto.CompressedPointCloud misses = 3;
inline bool CompressedRangeData::has_misses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompressedRangeData::set_has_misses() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompressedRangeData::clear_has_misses() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompressedRangeData::clear_misses() {
  if (misses_ != NULL) misses_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
  clear_has_misses();
}
inline const ::cartographer::sensor::proto::CompressedPointCloud& CompressedRangeData::misses() const {
  return misses_ != NULL ? *misses_ : *default_instance_->misses_;
}
inline ::cartographer::sensor::proto::CompressedPointCloud* CompressedRangeData::mutable_misses() {
  set_has_misses();
  if (misses_ == NULL) misses_ = new ::cartographer::sensor::proto::CompressedPointCloud;
  return misses_;
}
inline ::cartographer::sensor::proto::CompressedPointCloud* CompressedRangeData::release_misses() {
  clear_has_misses();
  ::cartographer::sensor::proto::CompressedPointCloud* temp = misses_;
  misses_ = NULL;
  return temp;
}
inline void CompressedRangeData::set_allocated_misses(::cartographer::sensor::proto::CompressedPointCloud* misses) {
  delete misses_;
  misses_ = misses;
  if (misses) {
    set_has_misses();
  } else {
    clear_has_misses();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fsensor_2fproto_2fsensor_2eproto__INCLUDED
